<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YamlDotNet</name>
    </assembly>
    <members>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsAlpha(System.Int32)">
            <summary>
            Check if the character at the specified position is an alphabetical
            character, a digit, '_', or '-'.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsAscii(System.Int32)">
            <summary>
            Check if the character is ASCII.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsDigit(System.Int32)">
            <summary>
            Check if the character at the specified position is a digit.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.AsDigit(System.Int32)">
            <summary>
            Get the value of a digit.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsHex(System.Int32)">
            <summary>
            Check if the character at the specified position is a hex-digit.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.AsHex(System.Int32)">
            <summary>
            Get the value of a hex-digit.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsZero(System.Int32)">
            <summary>
            Check if the character at the specified position is NUL.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsTab(System.Int32)">
            <summary>
            Check if the character at the specified position is tab.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsBlank(System.Int32)">
            <summary>
            Check if the character at the specified position is blank (space or tab).
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsBreak(System.Int32)">
            <summary>
            Check if the character at the specified position is a line break.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsBreakOrZero(System.Int32)">
            <summary>
            Check if the character is a line break or NUL.
            </summary>
        </member>
        <member name="M:YamlDotNet.CharacterAnalyzer`1.IsBlankOrBreakOrZero(System.Int32)">
            <summary>
            Check if the character is a line break, space, tab, or NUL.
            </summary>
        </member>
        <member name="T:YamlDotNet.Constants">
            <summary>
            Defines constants thar relate to the YAML specification.
            </summary>
        </member>
        <member name="T:YamlDotNet.Emitter">
            <summary>
            Emits YAML streams.
            </summary>
        </member>
        <member name="T:YamlDotNet.IEmitter">
            <summary>
            Represents a YAML stream emitter.
            </summary>
        </member>
        <member name="M:YamlDotNet.IEmitter.Emit(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Emits an event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.IEmitter"/> class.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where the emitter will write.</param>
        </member>
        <member name="M:YamlDotNet.Emitter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.IEmitter"/> class.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where the emitter will write.</param>
            <param name="bestIndent">The preferred indentation.</param>
        </member>
        <member name="M:YamlDotNet.Emitter.#ctor(System.IO.TextWriter,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.IEmitter"/> class.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where the emitter will write.</param>
            <param name="bestIndent">The preferred indentation.</param>
            <param name="bestWidth">The preferred text width.</param>
        </member>
        <member name="M:YamlDotNet.Emitter.#ctor(System.IO.TextWriter,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.IEmitter"/> class.
            </summary>
            <param name="output">The <see cref="T:System.IO.TextWriter"/> where the emitter will write.</param>
            <param name="bestIndent">The preferred indentation.</param>
            <param name="bestWidth">The preferred text width.</param>
            <param name="isCanonical">If true, write the output in canonical form.</param>
            <param name="forceIndentLess">if set to <c>true</c> [always indent].</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bestIndent
            or
            bestWidth;The bestWidth parameter must be greater than bestIndent * 2.
            </exception>
        </member>
        <member name="M:YamlDotNet.Emitter.Emit(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Emit an evt.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.NeedMoreEvents">
            <summary>
            Check if we need to accumulate more events before emitting.
            
            We accumulate extra
             - 1 event for DOCUMENT-START
             - 2 events for SEQUENCE-START
             - 3 events for MAPPING-START
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.AnalyzeEvent(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Check if the evt data is valid.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.AnalyzeScalar(System.String)">
            <summary>
            Check if a scalar is valid.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.AnalyzeTag(System.String)">
            <summary>
            Check if a tag is valid.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.StateMachine(YamlDotNet.Events.IParsingEvent)">
            <summary>
            State dispatcher.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitStreamStart(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Expect STREAM-START.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitDocumentStart(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            Expect DOCUMENT-START or STREAM-END.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.CheckEmptyDocument">
            <summary>
            Check if the document content is an empty scalar.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.AppendTagDirective(YamlDotNet.Tokens.TagDirective,System.Boolean)">
            <summary>
            Append a directive to the directives stack.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.AnalyzeVersionDirective(YamlDotNet.Tokens.VersionDirective)">
            <summary>
            Check if a %YAML directive is valid.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitDocumentContent(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Expect the root node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitNode(YamlDotNet.Events.IParsingEvent,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Expect a node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitSequenceStart(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Expect SEQUENCE-START.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.CheckEmptySequence">
            <summary>
            Check if the next events represent an empty sequence.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.CheckEmptyMapping">
            <summary>
            Check if the next events represent an empty mapping.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.ProcessTag">
            <summary>
            Write a tag.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitMappingStart(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Expect MAPPING-START.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitScalar(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Expect SCALAR.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.ProcessScalar">
            <summary>
            Write a scalar.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.IsSpace(System.Char)">
            <summary>
            Check if the specified character is a space.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.IncreaseIndent(System.Boolean,System.Boolean)">
            <summary>
            Increase the indentation level.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.SelectScalarStyle(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Determine an acceptable scalar style.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitAlias">
            <summary>
            Expect ALIAS.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.ProcessAnchor">
            <summary>
            Write an achor.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitDocumentEnd(YamlDotNet.Events.IParsingEvent)">
            <summary>
            Expect DOCUMENT-END.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitFlowSequenceItem(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            
            Expect a flow item node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitFlowMappingKey(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            Expect a flow key node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.CheckSimpleKey">
            <summary>
            Check if the next node can be expressed as a simple key.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitFlowMappingValue(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            Expect a flow value node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitBlockSequenceItem(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            Expect a block item node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitBlockMappingKey(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            Expect a block key node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Emitter.EmitBlockMappingValue(YamlDotNet.Events.IParsingEvent,System.Boolean)">
            <summary>
            Expect a block value node.
            </summary>
        </member>
        <member name="P:YamlDotNet.Emitter.ForceIndentLess">
            <summary>
            Gets or sets a value indicating whether [always indent].
            </summary>
            <value><c>true</c> if [always indent]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:YamlDotNet.EmitterState">
            <summary>
            Defines the YAML emitter's state.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_STREAM_START_STATE">
            <summary>
            Expect STREAM-START.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FIRST_DOCUMENT_START_STATE">
            <summary>
            Expect the first DOCUMENT-START or STREAM-END.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_DOCUMENT_START_STATE">
            <summary>
            Expect DOCUMENT-START or STREAM-END.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_DOCUMENT_CONTENT_STATE">
            <summary>
            Expect the content of a document.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_DOCUMENT_END_STATE">
            <summary>
            Expect DOCUMENT-END.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE">
            <summary>
            Expect the first item of a flow sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE">
            <summary>
            Expect an item of a flow sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE">
            <summary>
            Expect the first key of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FLOW_MAPPING_KEY_STATE">
            <summary>
            Expect a key of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE">
            <summary>
            Expect a value for a simple key of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_FLOW_MAPPING_VALUE_STATE">
            <summary>
            Expect a value of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE">
            <summary>
            Expect the first item of a block sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE">
            <summary>
            Expect an item of a block sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE">
            <summary>
            Expect the first key of a block mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_BLOCK_MAPPING_KEY_STATE">
            <summary>
            Expect the key of a block mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE">
            <summary>
            Expect a value for a simple key of a block mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_BLOCK_MAPPING_VALUE_STATE">
            <summary>
            Expect a value of a block mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.EmitterState.YAML_EMIT_END_STATE">
            <summary>
            Expect nothing.
            </summary>
        </member>
        <member name="T:YamlDotNet.EventReader">
            <summary>
            Reads events from a sequence of <see cref="T:YamlDotNet.Events.ParsingEvent"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.EventReader.#ctor(YamlDotNet.IParser)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.EventReader"/> class.
            </summary>
            <param name="parser">The parser that provides the events.</param>
        </member>
        <member name="M:YamlDotNet.EventReader.Expect``1">
            <summary>
            Ensures that the current event is of the specified type, returns it and moves to the next event.
            </summary>
            <typeparam name="T">Type of the <see cref="T:YamlDotNet.Events.ParsingEvent"/>.</typeparam>
            <returns>Returns the current event.</returns>
            <exception cref="T:YamlDotNet.YamlException">If the current event is not of the specified type.</exception>
        </member>
        <member name="M:YamlDotNet.EventReader.MoveNext">
            <summary>
            Moves to the next event.
            </summary>
        </member>
        <member name="M:YamlDotNet.EventReader.Accept``1">
            <summary>
            Checks whether the current event is of the specified type.
            </summary>
            <typeparam name="T">Type of the event.</typeparam>
            <returns>Returns true if the current event is of type <typeparamref name="T"/>. Otherwise returns false.</returns>
        </member>
        <member name="M:YamlDotNet.EventReader.Allow``1">
            <summary>
            Checks whether the current event is of the specified type.
            If the event is of the specified type, returns it and moves to the next event.
            Otherwise retruns null.
            </summary>
            <typeparam name="T">Type of the <see cref="T:YamlDotNet.Events.ParsingEvent"/>.</typeparam>
            <returns>Returns the current event if it is of type T; otherwise returns null.</returns>
        </member>
        <member name="M:YamlDotNet.EventReader.Peek``1">
            <summary>
            Gets the next event without consuming it.
            </summary>
            <typeparam name="T">Type of the <see cref="T:YamlDotNet.Events.ParsingEvent"/>.</typeparam>
            <returns>Returns the current event if it is of type T; otherwise returns null.</returns>
        </member>
        <member name="M:YamlDotNet.EventReader.Skip">
            <summary>
            Skips the current event and any "child" event.
            </summary>
        </member>
        <member name="M:YamlDotNet.EventReader.EnsureNotAtEndOfStream">
            <summary>
            Throws an exception if Ensures the not at end of stream.
            </summary>
        </member>
        <member name="P:YamlDotNet.EventReader.Parser">
            <summary>
            Gets the underlying parser.
            </summary>
            <value>The parser.</value>
        </member>
        <member name="T:YamlDotNet.Events.AnchorAlias">
            <summary>
            Represents an alias event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.ParsingEvent">
            <summary>
            Base class for parsing events.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IParsingEvent">
            <summary>
            Base interface for parsing events.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IParsingEvent.Start">
            <summary>
            Gets the position in the input stream where the event start.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IParsingEvent.End">
            <summary>
            Gets the position in the input stream where the event ends.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.ParsingEvent.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.ParsingEvent"/> class.
            </summary>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="P:YamlDotNet.Events.ParsingEvent.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.ParsingEvent.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.ParsingEvent.Start">
            <summary>
            Gets the position in the input stream where the event starts.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.ParsingEvent.End">
            <summary>
            Gets the position in the input stream where the event ends.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IAnchorAlias">
            <summary>
            Represents an alias event.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IAnchorAlias.Value">
            <summary>
            Gets the value of the alias.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.AnchorAlias.#ctor(System.String,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.AnchorAlias"/> class.
            </summary>
            <param name="value">The value of the alias.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.AnchorAlias.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.AnchorAlias"/> class.
            </summary>
            <param name="value">The value of the alias.</param>
        </member>
        <member name="M:YamlDotNet.Events.AnchorAlias.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.AnchorAlias.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.AnchorAlias.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.AnchorAlias.Value">
            <summary>
            Gets the value of the alias.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.DocumentEnd">
            <summary>
            Represents a document end event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IDocumentEnd">
            <summary>
            Represents a document end event.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IDocumentEnd.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:YamlDotNet.Events.DocumentEnd.#ctor(System.Boolean,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.DocumentEnd"/> class.
            </summary>
            <param name="isImplicit">Indicates whether the event is implicit.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.DocumentEnd.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.DocumentEnd"/> class.
            </summary>
            <param name="isImplicit">Indicates whether the event is implicit.</param>
        </member>
        <member name="M:YamlDotNet.Events.DocumentEnd.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.DocumentEnd.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.DocumentEnd.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.DocumentEnd.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:YamlDotNet.Events.DocumentStart">
            <summary>
            Represents a document start event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IDocumentStart">
            <summary>
            Represents a document start event.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IDocumentStart.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:YamlDotNet.Events.IDocumentStart.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:YamlDotNet.Events.IDocumentStart.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:YamlDotNet.Events.DocumentStart.#ctor(YamlDotNet.Tokens.VersionDirective,YamlDotNet.TagDirectiveCollection,System.Boolean,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.DocumentStart"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="tags">The tags.</param>
            <param name="isImplicit">Indicates whether the event is implicit.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.DocumentStart.#ctor(YamlDotNet.Tokens.VersionDirective,YamlDotNet.TagDirectiveCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.DocumentStart"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="tags">The tags.</param>
            <param name="isImplicit">Indicates whether the event is implicit.</param>
        </member>
        <member name="M:YamlDotNet.Events.DocumentStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.DocumentStart"/> class.
            </summary>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.DocumentStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.DocumentStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.DocumentStart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.DocumentStart.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.DocumentStart.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.DocumentStart.Tags">
            <summary>
            Gets the tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:YamlDotNet.Events.DocumentStart.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:YamlDotNet.Events.DocumentStart.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:YamlDotNet.Events.EventType">
            <summary>
            Defines the event types. This allows for simpler type comparisons.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_NO_EVENT">
            <summary>
            An empty event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_STREAM_START_EVENT">
            <summary>
            A STREAM-START event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_STREAM_END_EVENT">
            <summary>
            A STREAM-END event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_DOCUMENT_START_EVENT">
            <summary>
            A DOCUMENT-START event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_DOCUMENT_END_EVENT">
            <summary>
            A DOCUMENT-END event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_ALIAS_EVENT">
            <summary>
            An ALIAS event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_SCALAR_EVENT">
            <summary>
            A SCALAR event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_SEQUENCE_START_EVENT">
            <summary>
            A SEQUENCE-START event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_SEQUENCE_END_EVENT">
            <summary>
            A SEQUENCE-END event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_MAPPING_START_EVENT">
            <summary>
            A MAPPING-START event.
            </summary>
        </member>
        <member name="F:YamlDotNet.Events.EventType.YAML_MAPPING_END_EVENT">
            <summary>
            A MAPPING-END event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IMappingEnd">
            <summary>
            Represents a mapping end event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IMappingStart">
            <summary>
            Represents a mapping start event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.INodeEvent">
            <summary>
            Defines the behavior that is common between node events.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.INodeEvent.Anchor">
            <summary>
            Gets the anchor.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.INodeEvent.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.INodeEvent.IsCanonical">
            <summary>
            Gets a value indicating whether this instance is canonical.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IMappingStart.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YamlDotNet.Events.IMappingStart.Style">
            <summary>
            Gets the style of the mapping.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IScalar">
            <summary>
            Represents a scalar event.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IScalar.Style">
            <summary>
            Gets the style of the scalar.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:YamlDotNet.Events.IScalar.IsPlainImplicit">
            <summary>
            Gets a value indicating whether the tag is optional for the plain style.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.IScalar.IsQuotedImplicit">
            <summary>
            Gets a value indicating whether the tag is optional for any non-plain style.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.ISequenceEnd">
            <summary>
            Represents a sequence end event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.ISequenceStart">
            <summary>
            Represents a sequence start event.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.ISequenceStart.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:YamlDotNet.Events.IStreamEnd">
            <summary>
            Represents a stream end event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.IStreamStart">
            <summary>
            Represents a stream start event.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.NodeEvent">
            <summary>
            Contains the behavior that is common between node events.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.NodeEvent.#ctor(System.String,System.String,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.NodeEvent"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="tag">The tag.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.NodeEvent.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.NodeEvent"/> class.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.NodeEvent.Anchor">
            <summary>
            Gets the anchor.
            </summary>
            <value></value>
        </member>
        <member name="P:YamlDotNet.Events.NodeEvent.Tag">
            <summary>
            Gets the tag.
            </summary>
            <value></value>
        </member>
        <member name="P:YamlDotNet.Events.NodeEvent.IsCanonical">
            <summary>
            Gets a value indicating whether this instance is canonical.
            </summary>
            <value></value>
        </member>
        <member name="T:YamlDotNet.Events.MappingEnd">
            <summary>
            Represents a mapping end event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.MappingEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.MappingEnd"/> class.
            </summary>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.MappingEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.MappingEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.MappingEnd.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.MappingEnd.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.MappingEnd.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.MappingStart">
            <summary>
            Represents a mapping start event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.MappingStart.#ctor(System.String,System.String,System.Boolean,YamlDotNet.YamlStyle,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.MappingStart"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="tag">The tag.</param>
            <param name="isImplicit">Indicates whether the event is implicit.</param>
            <param name="style">The style of the mapping.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.MappingStart.#ctor(System.String,System.String,System.Boolean,YamlDotNet.YamlStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.MappingStart"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="tag">The tag.</param>
            <param name="isImplicit">Indicates whether the event is implicit.</param>
            <param name="style">The style of the mapping.</param>
        </member>
        <member name="M:YamlDotNet.Events.MappingStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.MappingStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.MappingStart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.MappingStart.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.MappingStart.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.MappingStart.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YamlDotNet.Events.MappingStart.IsCanonical">
            <summary>
            Gets a value indicating whether this instance is canonical.
            </summary>
            <value></value>
        </member>
        <member name="P:YamlDotNet.Events.MappingStart.Style">
            <summary>
            Gets the style of the mapping.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.Scalar">
            <summary>
            Represents a scalar event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.Scalar.#ctor(System.String,System.String,System.String,YamlDotNet.ScalarStyle,System.Boolean,System.Boolean,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.Scalar"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
            <param name="isPlainImplicit">.</param>
            <param name="isQuotedImplicit">.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.Scalar.#ctor(System.String,System.String,System.String,YamlDotNet.ScalarStyle,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.Scalar"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
            <param name="isPlainImplicit">.</param>
            <param name="isQuotedImplicit">.</param>
        </member>
        <member name="M:YamlDotNet.Events.Scalar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.Scalar"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Events.Scalar.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.Scalar"/> class.
            </summary>
            <param name="tag">The tag.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Events.Scalar.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.Scalar"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.Scalar.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.Style">
            <summary>
            Gets the style of the scalar.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.IsPlainImplicit">
            <summary>
            Gets a value indicating whether the tag is optional for the plain style.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.IsQuotedImplicit">
            <summary>
            Gets a value indicating whether the tag is optional for any non-plain style.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.Scalar.IsCanonical">
            <summary>
            Gets a value indicating whether this instance is canonical.
            </summary>
            <value></value>
        </member>
        <member name="T:YamlDotNet.Events.SequenceEnd">
            <summary>
            Represents a sequence end event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.SequenceEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.SequenceEnd"/> class.
            </summary>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.SequenceEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.SequenceEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.SequenceEnd.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.SequenceEnd.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.SequenceEnd.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.SequenceStart">
            <summary>
            Represents a sequence start event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.SequenceStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.SequenceStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.SequenceStart.#ctor(System.String,System.String,System.Boolean,YamlDotNet.YamlStyle,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.SequenceStart"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="tag">The tag.</param>
            <param name="isImplicit">if set to <c>true</c> [is implicit].</param>
            <param name="style">The style.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.SequenceStart.#ctor(System.String,System.String,System.Boolean,YamlDotNet.YamlStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.SequenceStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.SequenceStart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.SequenceStart.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.SequenceStart.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.SequenceStart.IsImplicit">
            <summary>
            Gets a value indicating whether this instance is implicit.
            </summary>
            <value>
            	<c>true</c> if this instance is implicit; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YamlDotNet.Events.SequenceStart.IsCanonical">
            <summary>
            Gets a value indicating whether this instance is canonical.
            </summary>
            <value></value>
        </member>
        <member name="P:YamlDotNet.Events.SequenceStart.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.IDynamicStyleFormat">
            <summary>
            An interface to plug custom <see cref="T:YamlDotNet.YamlStyle"/> to specifics objects instances while
            serializing. Use <see cref="P:YamlDotNet.Serialization.SerializerSettings.DynamicStyleFormat"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.IDynamicStyleFormat.GetStyle(YamlDotNet.Serialization.SerializerContext,System.Object,YamlDotNet.Serialization.ITypeDescriptor)">
            <summary>
            Gets the style for a specific instance/type. Return <see cref="F:YamlDotNet.YamlStyle.Any"/> if unspecified.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
            <param name="descriptor">The descriptor.</param>
            <returns>The style to apply ot <see cref="F:YamlDotNet.YamlStyle.Any"/> if unspecified.</returns>
        </member>
        <member name="T:YamlDotNet.YamlStyle">
            <summary>
            Specifies the style of a sequence or mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.YamlStyle.Any">
            <summary>
            Let the emitter choose the style.
            </summary>
        </member>
        <member name="F:YamlDotNet.YamlStyle.Block">
            <summary>
            The block style.
            </summary>
        </member>
        <member name="F:YamlDotNet.YamlStyle.Flow">
            <summary>
            The flow style.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.StreamEnd">
            <summary>
            Represents a stream end event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.StreamEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.StreamEnd"/> class.
            </summary>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.StreamEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.StreamEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.StreamEnd.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.StreamEnd.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.StreamEnd.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="T:YamlDotNet.Events.StreamStart">
            <summary>
            Represents a stream start event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.StreamStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.StreamStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Events.StreamStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Events.StreamStart"/> class.
            </summary>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="M:YamlDotNet.Events.StreamStart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Events.StreamStart.NestingIncrease">
            <summary>
            Gets a value indicating the variation of depth caused by this event.
            The value can be either -1, 0 or 1. For start events, it will be 1,
            for end events, it will be -1, and for the remaining events, it will be 0.
            </summary>
        </member>
        <member name="P:YamlDotNet.Events.StreamStart.Type">
            <summary>
            Gets the event type, which allows for simpler type comparisons.
            </summary>
        </member>
        <member name="T:YamlDotNet.FakeList`1">
            <summary>
            Implements an indexer through an IEnumerator&lt;T&gt;.
            </summary>
        </member>
        <member name="M:YamlDotNet.FakeList`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of FakeList&lt;T&gt;.
            </summary>
            <param name="collection">The enumerator to use to implement the indexer.</param>
        </member>
        <member name="M:YamlDotNet.FakeList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of FakeList&lt;T&gt;.
            </summary>
            <param name="collection">The collection to use to implement the indexer.</param>
        </member>
        <member name="P:YamlDotNet.FakeList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index. 
            </summary>
            <remarks>
            If index is greater or equal than the last used index, this operation is O(index - lastIndex),
            else this operation is O(index).
            </remarks>
        </member>
        <member name="M:YamlDotNet.ILookAheadBuffer.Peek(System.Int32)">
            <summary>
            Gets the character at thhe specified offset.
            </summary>
        </member>
        <member name="M:YamlDotNet.ILookAheadBuffer.Skip(System.Int32)">
            <summary>
            Skips the next <paramref name="length"/> characters. Those characters must have been
            obtained first by calling the <see cref="M:YamlDotNet.ILookAheadBuffer.Peek(System.Int32)"/> method.
            </summary>
        </member>
        <member name="P:YamlDotNet.ILookAheadBuffer.EndOfInput">
            <summary>
            Gets a value indicating whether the end of the input reader has been reached.
            </summary>
        </member>
        <member name="T:YamlDotNet.InsertionQueue`1">
            <summary>
            Generic queue on which items may be inserted
            </summary>
        </member>
        <member name="M:YamlDotNet.InsertionQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the specified item.
            </summary>
            <param name="item">The item to be enqueued.</param>
        </member>
        <member name="M:YamlDotNet.InsertionQueue`1.Dequeue">
            <summary>
            Dequeues an item.
            </summary>
            <returns>Returns the item that been dequeued.</returns>
        </member>
        <member name="M:YamlDotNet.InsertionQueue`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index where to insert the item.</param>
            <param name="item">The item to be inserted.</param>
        </member>
        <member name="P:YamlDotNet.InsertionQueue`1.Count">
            <summary>
            Gets the number of items that are contained by the queue.
            </summary>
        </member>
        <member name="T:YamlDotNet.IParser">
            <summary>
            Represents a YAML stream paser.
            </summary>
        </member>
        <member name="M:YamlDotNet.IParser.MoveNext">
            <summary>
            Moves to the next event.
            </summary>
            <returns>Returns true if there are more events available, otherwise returns false.</returns>
        </member>
        <member name="P:YamlDotNet.IParser.Current">
            <summary>
            Gets the current event.
            </summary>
        </member>
        <member name="T:YamlDotNet.LookAheadBuffer">
            <summary>
            Provides access to a stream and allows to peek at the next characters,
            up to the buffer's capacity.
            </summary>
            <remarks>
            This class implements a circular buffer with a fixed capacity.
            </remarks>
        </member>
        <member name="M:YamlDotNet.LookAheadBuffer.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.LookAheadBuffer"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:YamlDotNet.LookAheadBuffer.GetIndexForOffset(System.Int32)">
            <summary>
            Gets the index of the character for the specified offset.
            </summary>
        </member>
        <member name="M:YamlDotNet.LookAheadBuffer.Peek(System.Int32)">
            <summary>
            Gets the character at thhe specified offset.
            </summary>
        </member>
        <member name="M:YamlDotNet.LookAheadBuffer.Cache(System.Int32)">
            <summary>
            Reads characters until at least <paramref name="length"/> characters are in the buffer.
            </summary>
            <param name="length">
            Number of characters to cache.
            </param>
        </member>
        <member name="M:YamlDotNet.LookAheadBuffer.Skip(System.Int32)">
            <summary>
            Skips the next <paramref name="length"/> characters. Those characters must have been
            obtained first by calling the <see cref="M:YamlDotNet.LookAheadBuffer.Peek(System.Int32)"/> or <see cref="M:YamlDotNet.LookAheadBuffer.Cache(System.Int32)"/> methods.
            </summary>
        </member>
        <member name="P:YamlDotNet.LookAheadBuffer.EndOfInput">
            <summary>
            Gets a value indicating whether the end of the input reader has been reached.
            </summary>
        </member>
        <member name="T:YamlDotNet.Mark">
            <summary>
            Represents a location inside a file
            </summary>
        </member>
        <member name="F:YamlDotNet.Mark.Empty">
            <summary>
            Gets a <see cref="T:YamlDotNet.Mark"/> with empty values.
            </summary>
        </member>
        <member name="M:YamlDotNet.Mark.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:YamlDotNet.Mark.Index">
            <summary>
            Gets / sets the absolute offset in the file
            </summary>
        </member>
        <member name="P:YamlDotNet.Mark.Line">
            <summary>
            Gets / sets the number of the line
            </summary>
        </member>
        <member name="P:YamlDotNet.Mark.Column">
            <summary>
            Gets / sets the index of the column
            </summary>
        </member>
        <member name="T:YamlDotNet.Parser">
            <summary>
            Parses YAML streams.
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.IParser"/> class.
            </summary>
            <param name="input">The input where the YAML stream is to be read.</param>
        </member>
        <member name="M:YamlDotNet.Parser.MoveNext">
            <summary>
            Moves to the next event.
            </summary>
            <returns>Returns true if there are more events available, otherwise returns false.</returns>
        </member>
        <member name="M:YamlDotNet.Parser.ParseStreamStart">
            <summary>
            Parse the production:
            stream   ::= STREAM-START implicit_document? explicit_document* STREAM-END
                         ************
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseDocumentStart(System.Boolean)">
            <summary>
            Parse the productions:
            implicit_document    ::= block_node DOCUMENT-END*
                                     *
            explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*
                                     *************************
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ProcessDirectives(YamlDotNet.TagDirectiveCollection)">
            <summary>
            Parse directives.
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseDocumentContent">
            <summary>
            Parse the productions:
            explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*
                                                               ***********
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ProcessEmptyScalar(YamlDotNet.Mark)">
            <summary>
            Generate an empty scalar event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseNode(System.Boolean,System.Boolean)">
            <summary>
            Parse the productions:
            block_node_or_indentless_sequence    ::=
                                     ALIAS
                                     *****
                                     | properties (block_content | indentless_block_sequence)?
                                       **********  *
                                     | block_content | indentless_block_sequence
                                       *
            block_node           ::= ALIAS
                                     *****
                                     | properties block_content?
                                       ********** *
                                     | block_content
                                       *
            flow_node            ::= ALIAS
                                     *****
                                     | properties flow_content?
                                       ********** *
                                     | flow_content
                                       *
            properties           ::= TAG ANCHOR? | ANCHOR TAG?
                                     *************************
            block_content        ::= block_collection | flow_collection | SCALAR
                                                                          ******
            flow_content         ::= flow_collection | SCALAR
                                                       ******
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseDocumentEnd">
            <summary>
            Parse the productions:
            implicit_document    ::= block_node DOCUMENT-END*
                                                *************
            explicit_document    ::= DIRECTIVE* DOCUMENT-START block_node? DOCUMENT-END*
                                                                           *************
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseBlockSequenceEntry(System.Boolean)">
            <summary>
            Parse the productions:
            block_sequence ::= BLOCK-SEQUENCE-START (BLOCK-ENTRY block_node?)* BLOCK-END
                               ********************  *********** *             *********
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseIndentlessSequenceEntry">
            <summary>
            Parse the productions:
            indentless_sequence  ::= (BLOCK-ENTRY block_node?)+
                                      *********** *
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseBlockMappingKey(System.Boolean)">
             <summary>
             Parse the productions:
             block_mapping        ::= BLOCK-MAPPING_START
                                      *******************
                                      ((KEY block_node_or_indentless_sequence?)?
                                        *** *
                                      (VALUE block_node_or_indentless_sequence?)?)*
            
                                      BLOCK-END
                                      *********
             </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseBlockMappingValue">
             <summary>
             Parse the productions:
             block_mapping        ::= BLOCK-MAPPING_START
            
                                      ((KEY block_node_or_indentless_sequence?)?
            
                                      (VALUE block_node_or_indentless_sequence?)?)*
                                       ***** *
                                      BLOCK-END
            
             </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseFlowSequenceEntry(System.Boolean)">
            <summary>
            Parse the productions:
            flow_sequence        ::= FLOW-SEQUENCE-START
                                     *******************
                                     (flow_sequence_entry FLOW-ENTRY)*
                                      *                   **********
                                     flow_sequence_entry?
                                     *
                                     FLOW-SEQUENCE-END
                                     *****************
            flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?
                                     *
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseFlowSequenceEntryMappingKey">
            <summary>
            Parse the productions:
            flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?
                                                 *** *
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseFlowSequenceEntryMappingValue">
            <summary>
            Parse the productions:
            flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?
                                                                 ***** *
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseFlowSequenceEntryMappingEnd">
            <summary>
            Parse the productions:
            flow_sequence_entry  ::= flow_node | KEY flow_node? (VALUE flow_node?)?
                                                                                 *
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseFlowMappingKey(System.Boolean)">
            <summary>
            Parse the productions:
            flow_mapping         ::= FLOW-MAPPING-START
                                     ******************
                                     (flow_mapping_entry FLOW-ENTRY)*
                                      *                  **********
                                     flow_mapping_entry?
                                     ******************
                                     FLOW-MAPPING-END
                                     ****************
            flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?
                                     *           *** *
            </summary>
        </member>
        <member name="M:YamlDotNet.Parser.ParseFlowMappingValue(System.Boolean)">
            <summary>
            Parse the productions:
            flow_mapping_entry   ::= flow_node | KEY flow_node? (VALUE flow_node?)?
                                              *                  ***** *
            </summary>
        </member>
        <member name="P:YamlDotNet.Parser.Current">
            <summary>
            Gets the current event.
            </summary>
        </member>
        <member name="T:YamlDotNet.ParserState">
            <summary>
            Defines the YAML parser's state.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_STREAM_START_STATE">
            <summary>
            Expect STREAM-START.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE">
            <summary>
            Expect the beginning of an implicit document.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_DOCUMENT_START_STATE">
            <summary>
            Expect DOCUMENT-START.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_DOCUMENT_CONTENT_STATE">
            <summary>
            Expect the content of a document.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_DOCUMENT_END_STATE">
            <summary>
            Expect DOCUMENT-END.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_NODE_STATE">
            <summary>
            Expect a block node.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE">
            <summary>
            Expect a block node or indentless sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_NODE_STATE">
            <summary>
            Expect a flow node.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE">
            <summary>
            Expect the first entry of a block sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE">
            <summary>
            Expect an entry of a block sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE">
            <summary>
            Expect an entry of an indentless sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE">
            <summary>
            Expect the first key of a block mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_MAPPING_KEY_STATE">
            <summary>
            Expect a block mapping key.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_BLOCK_MAPPING_VALUE_STATE">
            <summary>
            Expect a block mapping value.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE">
            <summary>
            Expect the first entry of a flow sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE">
            <summary>
            Expect an entry of a flow sequence.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE">
            <summary>
            Expect a key of an ordered mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE">
            <summary>
            Expect a value of an ordered mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE">
            <summary>
            Expect the and of an ordered mapping entry.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE">
            <summary>
            Expect the first key of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_MAPPING_KEY_STATE">
            <summary>
            Expect a key of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_MAPPING_VALUE_STATE">
            <summary>
            Expect a value of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE">
            <summary>
            Expect an empty value of a flow mapping.
            </summary>
        </member>
        <member name="F:YamlDotNet.ParserState.YAML_PARSE_END_STATE">
            <summary>
            Expect nothing.
            </summary>
        </member>
        <member name="T:YamlDotNet.Scanner">
            <summary>
            Converts a sequence of characters into a sequence of YAML tokens.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Scanner"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:YamlDotNet.Scanner.MoveNext">
            <summary>
            Moves to the next token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:YamlDotNet.Scanner.ConsumeCurrent">
            <summary>
            Consumes the current token and increments the parsed token count
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.StaleSimpleKeys">
            <summary>
            Check the list of potential simple keys and remove the positions that
            cannot contain simple keys anymore.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.UnrollIndent(System.Int32)">
            <summary>
            Pop indentation levels from the indents stack until the current level
            becomes less or equal to the column.  For each intendation level, append
            the BLOCK-END token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchStreamEnd">
            <summary>
            Produce the STREAM-END token and shut down the scanner.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanDirective">
             <summary>
             Scan a YAML-DIRECTIVE or TAG-DIRECTIVE token.
            
             Scope:
                  %YAML    1.1    # a comment \n
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                  %TAG    !yaml!  tag:yaml.org,2002:  \n
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchDocumentIndicator(System.Boolean)">
            <summary>
            Produce the DOCUMENT-START or DOCUMENT-END token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchFlowCollectionStart(System.Boolean)">
            <summary>
            Produce the FLOW-SEQUENCE-START or FLOW-MAPPING-START token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.IncreaseFlowLevel">
            <summary>
            Increase the flow level and resize the simple key list if needed.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchFlowCollectionEnd(System.Boolean)">
            <summary>
            Produce the FLOW-SEQUENCE-END or FLOW-MAPPING-END token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.DecreaseFlowLevel">
            <summary>
            Decrease the flow level.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchFlowEntry">
            <summary>
            Produce the FLOW-ENTRY token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchBlockEntry">
            <summary>
            Produce the BLOCK-ENTRY token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchKey">
            <summary>
            Produce the KEY token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchValue">
            <summary>
            Produce the VALUE token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.RollIndent(System.Int32,System.Int32,System.Boolean,YamlDotNet.Mark)">
            <summary>
            Push the current indentation level to the stack and set the new level
            the current column is greater than the indentation level.  In this case,
            append or insert the specified token into the token queue.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchAnchor(System.Boolean)">
            <summary>
            Produce the ALIAS or ANCHOR token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchTag">
            <summary>
            Produce the TAG token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanTag">
            <summary>
            Scan a TAG token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchBlockScalar(System.Boolean)">
            <summary>
            Produce the SCALAR(...,literal) or SCALAR(...,folded) tokens.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanBlockScalar(System.Boolean)">
            <summary>
            Scan a block scalar.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanBlockScalarBreaks(System.Int32,System.Text.StringBuilder,YamlDotNet.Mark,YamlDotNet.Mark@)">
            <summary>
            Scan intendation spaces and line breaks for a block scalar.  Determine the
            intendation level if needed.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchFlowScalar(System.Boolean)">
            <summary>
            Produce the SCALAR(...,single-quoted) or SCALAR(...,double-quoted) tokens.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanFlowScalar(System.Boolean)">
            <summary>
            Scan a quoted scalar.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.FetchPlainScalar">
            <summary>
            Produce the SCALAR(...,plain) token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanPlainScalar">
            <summary>
            Scan a plain scalar.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.RemoveSimpleKey">
            <summary>
            Remove a potential simple key at the current flow level.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanDirectiveName(YamlDotNet.Mark)">
             <summary>
             Scan the directive name.
            
             Scope:
                  %YAML   1.1     # a comment \n
                   ^^^^
                  %TAG    !yaml!  tag:yaml.org,2002:  \n
                   ^^^
             </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanVersionDirectiveValue(YamlDotNet.Mark)">
             <summary>
             Scan the value of VERSION-DIRECTIVE.
            
             Scope:
                  %YAML   1.1     # a comment \n
                       ^^^^^^
             </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanTagDirectiveValue(YamlDotNet.Mark)">
             <summary>
             Scan the value of a TAG-DIRECTIVE token.
            
             Scope:
                  %TAG    !yaml!  tag:yaml.org,2002:  \n
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
             </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanTagUri(System.String,YamlDotNet.Mark)">
            <summary>
            Scan a tag.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanUriEscapes(YamlDotNet.Mark)">
            <summary>
            Decode an URI-escape sequence corresponding to a single UTF-8 character.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanTagHandle(System.Boolean,YamlDotNet.Mark)">
            <summary>
            Scan a tag handle.
            </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.ScanVersionDirectiveNumber(YamlDotNet.Mark)">
             <summary>
             Scan the version number of VERSION-DIRECTIVE.
            
             Scope:
                  %YAML   1.1     # a comment \n
                          ^
                  %YAML   1.1     # a comment \n
                            ^
             </summary>
        </member>
        <member name="M:YamlDotNet.Scanner.SaveSimpleKey">
            <summary>
            Check if a simple key may start at the current position and add it if
            needed.
            </summary>
        </member>
        <member name="P:YamlDotNet.Scanner.CurrentPosition">
            <summary>
            Gets the current position inside the input stream.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:YamlDotNet.Scanner.Current">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="T:YamlDotNet.Schemas.CoreSchema">
            <summary>
            Implements the Core schema. <see cref="!:http://www.yaml.org/spec/1.2/spec.html#id2804356"/>
            </summary>
            <remarks>
            The Core schema is an extension of the JSON schema, allowing for more human-readable presentation of the same types. 
            This is the recommended default schema that YAML processor should use unless instructed otherwise. 
            It is also strongly recommended that other schemas should be based on it. 
            </remarks>
        </member>
        <member name="T:YamlDotNet.Schemas.JsonSchema">
            <summary>
            Implements a JSON schema. <see cref="!:http://www.yaml.org/spec/1.2/spec.html#id2803231"/>
            </summary>
            <remarks>
            The JSON schema is the lowest common denominator of most modern computer languages, and allows parsing JSON files. 
            A YAML processor should therefore support this schema, at least as an option. It is also strongly recommended that other schemas should be based on it. .
            </remarks>&gt;
        </member>
        <member name="T:YamlDotNet.Schemas.FailsafeSchema">
            <summary>
            Implements the YAML failsafe schema.
            <see cref="!:http://www.yaml.org/spec/1.2/spec.html#id2802346"/>
            </summary>
            <remarks>The failsafe schema is guaranteed to work with any YAML document.
            It is therefore the recommended schema for generic YAML tools.
            A YAML processor should therefore support this schema, at least as an option.</remarks>
        </member>
        <member name="T:YamlDotNet.Schemas.SchemaBase">
            <summary>
            Base implementation for a based schema.
            </summary>
        </member>
        <member name="T:YamlDotNet.Schemas.IYamlSchema">
            <summary>
            Provides schema information for tag resolution.
            </summary>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.ExpandTag(System.String)">
            <summary>
            Expands the tag. Example, transforms a short tag '!!str' to its long version 'tag:yaml.org,2002:str'
            </summary>
            <param name="shortTag">The tag.</param>
            <returns>Expanded version of the tag.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.ShortenTag(System.String)">
            <summary>
            Shortens the tag. Example, transforms a long tag 'tag:yaml.org,2002:str' to its short version '!!str'
            </summary>
            <param name="tag">The tag.</param>
            <returns>Expanded version of the tag.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.GetDefaultTag(YamlDotNet.Events.NodeEvent)">
            <summary>
            Gets the default tag for the specified <see cref="T:YamlDotNet.Events.NodeEvent"/>. The default tag can be different from a actual tag of this <see cref="T:YamlDotNet.Events.NodeEvent"/>.
            </summary>
            <param name="nodeEvent">The node event.</param>
            <returns>A short tag.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.GetDefaultTag(System.Type)">
            <summary>
            Gets the default tag for the specified <see cref="T:System.Type"/>. This is only valid for scalar, return null if no default tag found.
            </summary>
            <returns>A short tag.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.IsTagImplicit(System.String)">
            <summary>
            Determines whether the short tag implicit (e.g. !!int).
            </summary>
            <param name="tag">The tag.</param>
            <returns><c>true</c> if [is tag implicit] [the specified tag]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.TryParse(YamlDotNet.Events.Scalar,System.Boolean,System.String@,System.Object@)">
            <summary>
            Gets the default tag and value for the specified <see cref="T:YamlDotNet.Events.Scalar"/>. The default tag can be different from a actual tag of this <see cref="T:YamlDotNet.Events.NodeEvent"/>.
            </summary>
            <param name="scalar">The scalar event.</param>
            <param name="decodeValue">if set to <c>true</c> [decode value].</param>
            <param name="defaultTag">The default tag decoded from the scalar.</param>
            <param name="value">The value extracted from a scalar.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.TryParse(YamlDotNet.Events.Scalar,System.Type,System.Object@)">
            <summary>
            Gets the default tag and value for the specified <see cref="T:YamlDotNet.Events.Scalar"/>. The default tag can be different from a actual tag of this <see cref="T:YamlDotNet.Events.NodeEvent"/>.
            </summary>
            <param name="scalar">The scalar event.</param>
            <param name="type">The type.</param>
            <param name="value">The value extracted from a scalar.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.GetTypeForDefaultTag(System.String)">
            <summary>
            Gets the type for a default tag.
            </summary>
            <param name="tag">The tag in short form.</param>
            <returns>The type for a default tag or null if no default tag associated</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.IYamlSchema.RegisterTag(System.String,System.String)">
            <summary>
            Registers a long/short tag association.
            </summary>
            <param name="shortTag">The short tag.</param>
            <param name="longTag">The long tag.</param>
            <exception cref="T:System.ArgumentNullException">
            shortTag
            or
            shortTag
            </exception>
        </member>
        <member name="F:YamlDotNet.Schemas.SchemaBase.StrShortTag">
            <summary>
            The string short tag: !!str
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.SchemaBase.StrLongTag">
            <summary>
            The string long tag: tag:yaml.org,2002:str
            </summary>
        </member>
        <member name="M:YamlDotNet.Schemas.SchemaBase.RegisterTag(System.String,System.String)">
            <summary>
            Registers a long/short tag association.
            </summary>
            <param name="shortTag">The short tag.</param>
            <param name="longTag">The long tag.</param>
            <exception cref="T:System.ArgumentNullException">
            shortTag
            or
            shortTag
            </exception>
        </member>
        <member name="M:YamlDotNet.Schemas.SchemaBase.GetDefaultTag(YamlDotNet.Events.MappingStart)">
            <summary>
            Gets the default tag for a <see cref="T:YamlDotNet.Events.MappingStart"/> event.
            </summary>
            <param name="nodeEvent">The node event.</param>
            <returns>The default tag for a map.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.SchemaBase.GetDefaultTag(YamlDotNet.Events.SequenceStart)">
            <summary>
            Gets the default tag for a <see cref="T:YamlDotNet.Events.SequenceStart"/> event.
            </summary>
            <param name="nodeEvent">The node event.</param>
            <returns>The default tag for a seq.</returns>
        </member>
        <member name="M:YamlDotNet.Schemas.SchemaBase.PrepareScalarRules">
            <summary>
            Prepare scalar rules. In the implementation of this method, should call <see cref="M:YamlDotNet.Schemas.SchemaBase.AddScalarRule``1(System.String,System.String,System.Func{System.Text.RegularExpressions.Match,``0},System.Func{``0,System.String})"/>
            </summary>
        </member>
        <member name="M:YamlDotNet.Schemas.SchemaBase.AddScalarRule``1(System.String,System.String,System.Func{System.Text.RegularExpressions.Match,``0},System.Func{``0,System.String})">
            <summary>
            Add a tag resolution rule that is invoked when <paramref name="regex"/> matches
            the <see cref="T:YamlDotNet.Events.Scalar">Value of</see> a <see cref="T:YamlDotNet.Events.Scalar"/> node.
            The tag is resolved to <paramref name="tag"/> and <paramref name="decode"/> is
            invoked when actual value of type <typeparamref name="T"/> is extracted from
            the node text.
            </summary>
            <typeparam name="T">Type of the scalar</typeparam>
            <param name="tag">The tag.</param>
            <param name="regex">The regex.</param>
            <param name="decode">The decode function.</param>
            <param name="encode">The encode function.</param>
            <example>
              <code>
            BeginUpdate(); // to avoid invoking slow internal calculation method many times.
            Add( ... );
            Add( ... );
            Add( ... );
            Add( ... );
            EndUpdate();   // automaticall invoke internal calculation method
              </code></example>
        </member>
        <member name="M:YamlDotNet.Schemas.SchemaBase.RegisterDefaultTagMappings">
            <summary>
            Allows to register tag mapping for all primitive types (e.g. int -> !!int)
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.FailsafeSchema.MapShortTag">
            <summary>
            The map short tag: !!map.
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.FailsafeSchema.MapLongTag">
            <summary>
            The map long tag: tag:yaml.org,2002:map
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.FailsafeSchema.SeqShortTag">
            <summary>
            The seq short tag: !!seq
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.FailsafeSchema.SeqLongTag">
            <summary>
            The seq long tag: tag:yaml.org,2002:seq
            </summary>
        </member>
        <member name="M:YamlDotNet.Schemas.FailsafeSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Schemas.FailsafeSchema"/> class.
            </summary>
        </member>
        <member name="P:YamlDotNet.Schemas.FailsafeSchema.AllowFailsafeString">
            <summary>
            Gets or sets a value indicating whether this schema should always fallback to a
            failsafe string in case of not matching any scalar rules. Default is true for <see cref="T:YamlDotNet.Schemas.FailsafeSchema"/>
            </summary>
            <value><c>true</c> if [allow failsafe string]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.NullShortTag">
            <summary>
            The null short tag: !!null
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.NullLongTag">
            <summary>
            The null long tag: tag:yaml.org,2002:null
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.BoolShortTag">
            <summary>
            The bool short tag: !!bool
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.BoolLongTag">
            <summary>
            The bool long tag: tag:yaml.org,2002:bool
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.IntShortTag">
            <summary>
            The int short tag: !!int
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.IntLongTag">
            <summary>
            The int long tag: tag:yaml.org,2002:int
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.FloatShortTag">
            <summary>
            The float short tag: !!float
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.JsonSchema.FloatLongTag">
            <summary>
            The float long tag: tag:yaml.org,2002:float
            </summary>
        </member>
        <member name="M:YamlDotNet.Schemas.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Schemas.JsonSchema"/> class.
            </summary>
        </member>
        <member name="T:YamlDotNet.Schemas.ExtendedSchema">
            <summary>
            Extension to the core schema and accept different flavor of scalars
            <ul>
            <li>bool(true):  y|Y|yes|Yes|YES|true|True|TRUE|on|On|ON</li>
            <li>bool(false): n|N|no|No|NO|false|False|FALSE|off|Off|OFF</li>
            <li>timestamp</li>
            </ul>
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.ExtendedSchema.TimestampShortTag">
            <summary>
            The timestamp short tag: !!timestamp
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.ExtendedSchema.TimestampLongTag">
            <summary>
            The timestamp long tag: tag:yaml.org,2002:timestamp
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.ExtendedSchema.MergeShortTag">
            <summary>
            The merge short tag: !!merge
            </summary>
        </member>
        <member name="F:YamlDotNet.Schemas.ExtendedSchema.MergeLongTag">
            <summary>
            The merge long tag: tag:yaml.org,2002:merge
            </summary>
        </member>
        <member name="M:YamlDotNet.Schemas.ExtendedSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Schemas.ExtendedSchema"/> class.
            </summary>
        </member>
        <member name="T:YamlDotNet.SemanticErrorException">
            <summary>
            Exception that is thrown when a semantic error is detected on a YAML stream.
            </summary>
        </member>
        <member name="T:YamlDotNet.YamlException">
            <summary>
            Base exception that is thrown when the a problem occurs in the YamlDotNet library.
            </summary>
        </member>
        <member name="M:YamlDotNet.YamlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.YamlException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.YamlException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.YamlException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:YamlDotNet.YamlException.#ctor(YamlDotNet.Mark,YamlDotNet.Mark,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.YamlException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.YamlException.#ctor(YamlDotNet.Mark,YamlDotNet.Mark,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.YamlException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.YamlException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.YamlException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:YamlDotNet.YamlException.Start">
            <summary>
            Gets the position in the input stream where the event that originated the exception starts.
            </summary>
        </member>
        <member name="P:YamlDotNet.YamlException.End">
            <summary>
            Gets the position in the input stream where the event that originated the exception ends.
            </summary>
        </member>
        <member name="M:YamlDotNet.SemanticErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SemanticErrorException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.SemanticErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SemanticErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:YamlDotNet.SemanticErrorException.#ctor(YamlDotNet.Mark,YamlDotNet.Mark,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SemanticErrorException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.SemanticErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SemanticErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:YamlDotNet.Serialization.ChainedEventEmitter">
            <summary>
            Provided the base implementation for an IEventEmitter that is a
            decorator for another IEventEmitter.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.IEventEmitter">
            <summary>
            Interface used to write YAML events.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.AnchorNotFoundException">
            <summary>
            The exception that is thrown when an alias references an anchor that does not exist.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.AnchorNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.AnchorNotFoundException"/> class.
            </summary>
            <param name="anchorAlias">The anchor alias.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.AnchorNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.AnchorNotFoundException"/> class.
            </summary>
            <param name="anchorAlias">The anchor alias.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.AnchorNotFoundException.#ctor(System.String,YamlDotNet.Mark,YamlDotNet.Mark,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.AnchorNotFoundException"/> class.
            </summary>
            <param name="anchorAlias">The anchor alias.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="message">The message.</param>
        </member>
        <member name="P:YamlDotNet.Serialization.AnchorNotFoundException.Alias">
            <summary>
            Gets or sets the anchor alias.
            </summary>
            <value>The anchor alias.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.ChainedObjectFactory">
            <summary>
            An <see cref="T:YamlDotNet.Serialization.IObjectFactory"/> that can be chained with another object factory;
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.IObjectFactory">
            <summary>
            Creates instances of types.
            </summary>
            <remarks>
            This interface allows to provide a custom logic for creating instances during deserialization.
            </remarks>
        </member>
        <member name="M:YamlDotNet.Serialization.IObjectFactory.Create(System.Type)">
            <summary>
            Creates an instance of the specified type.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ChainedObjectFactory.#ctor(YamlDotNet.Serialization.IObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.ChainedObjectFactory"/> class.
            </summary>
            <param name="nextFactory">The next factory.</param>
        </member>
        <member name="T:YamlDotNet.Serialization.DefaultObjectFactory">
            <summary>
            Creates objects using Activator.CreateInstance.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.DefaultObjectFactory.GetDefaultImplementation(System.Type)">
            <summary>
            Gets the default implementation for a type.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the implem or the same type as input if there is no default implementation</returns>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.ArrayDescriptor">
            <summary>
            A descriptor for an array.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.ObjectDescriptor">
            <summary>
            Default implementation of a <see cref="T:YamlDotNet.Serialization.ITypeDescriptor"/>.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.ITypeDescriptor">
            <summary>
            Provides access members of a type.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ITypeDescriptor.Contains(System.String)">
            <summary>
            Determines whether this instance contains a member with the specified member name.
            </summary>
            <param name="memberName">Name of the member.</param>
            <returns><c>true</c> if this instance contains a member with the specified member name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.Type">
            <summary>
            Gets the type described by this instance.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.Members">
            <summary>
            Gets the members of this type.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.Count">
            <summary>
            Gets the member count.
            </summary>
            <value>The member count.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.HasMembers">
            <summary>
            Gets a value indicating whether this instance has members.
            </summary>
            <value><c>true</c> if this instance has members; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.Item(System.String)">
            <summary>
            Gets the <see cref="T:YamlDotNet.Serialization.IMemberDescriptor"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>The member.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.IsCompilerGenerated">
            <summary>
            Gets a value indicating whether this instance is a compiler generated type.
            </summary>
            <value><c>true</c> if this instance is a compiler generated type; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.ITypeDescriptor.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.ObjectDescriptor.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.ObjectDescriptor"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="type">The type.</param>
            <param name="emitDefaultValues"></param>
            <exception cref="T:System.ArgumentNullException">type</exception>
            <exception cref="T:YamlDotNet.YamlException">Failed to get ObjectDescriptor for type [{0}]. The member [{1}] cannot be registered as a member with the same name is already registered [{2}].DoFormat(type.FullName, member, existingMember)</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.ArrayDescriptor.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.ObjectDescriptor"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Expecting arrat type;type</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.ArrayDescriptor.CreateArray(System.Int32)">
            <summary>
            Creates the equivalent of list type for this array.
            </summary>
            <returns>A list type with same element type than this array.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.ArrayDescriptor.ElementType">
            <summary>
            Gets the type of the array element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.CollectionDescriptor">
            <summary>
            Provides a descriptor for a <see cref="T:System.Collections.ICollection"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.CollectionDescriptor"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="type">The type.</param>
            <param name="emitDefaultValues">if set to <c>true</c> [emit default values].</param>
            <exception cref="T:System.ArgumentException">Expecting a type inheriting from System.Collections.ICollection;type</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.CollectionAdd(System.Object,System.Object)">
            <summary>
            Add to the collections of the same type than this descriptor.
            </summary>
            <param name="collection">The collection.</param>
            <param name="value">The value to add to this collection.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.IsReadOnly(System.Object)">
            <summary>
            Determines whether the specified collection is read only.
            </summary>
            <param name="collection">The collection.</param>
            <returns><c>true</c> if the specified collection is read only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.GetCollectionCount(System.Object)">
            <summary>
            Determines the number of elements of a collection, -1 if it cannot determine the number of elements.
            </summary>
            <param name="collection">The collection.</param>
            <returns>The number of elements of a collection, -1 if it cannot determine the number of elements.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.IsCollection(System.Type)">
            <summary>
            Determines whether the specified type is collection.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.ElementType">
            <summary>
            Gets or sets the type of the element.
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.HasOnlyCapacity">
            <summary>
            Gets a value indicating whether the collection has only the capacity as a property defined.
            </summary>
            <value><c>true</c> if the collection has only the capacity as a property defined; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.IsPureCollection">
            <summary>
            Gets a value indicating whether this instance is a pure collection (no public property/field)
            </summary>
            <value><c>true</c> if this instance is pure collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.CollectionDescriptor.HasAdd">
            <summary>
            Gets a value indicating whether this collection type has add method.
            </summary>
            <value><c>true</c> if this instance has add; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor">
            <summary>
            Provides a descriptor for a <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="type">The type.</param>
            <param name="emitDefaultValues">if set to <c>true</c> [emit default values].</param>
            <exception cref="T:System.ArgumentException">Expecting a type inheriting from System.Collections.IDictionary;type</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.IsReadOnly(System.Object)">
            <summary>
            Determines whether the value passed is readonly.
            </summary>
            <param name="thisObject">The this object.</param>
            <returns><c>true</c> if [is read only] [the specified this object]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.GetEnumerator(System.Object)">
            <summary>
            Gets a generic enumerator for a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <returns>A generic enumerator.</returns>
            <exception cref="T:System.ArgumentNullException">dictionary</exception>
            <exception cref="T:System.NotSupportedException">Key value-pair [{0}] is not supported for IDictionary. Only DictionaryEntry.DoFormat(keyValueObject)</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.AddToDictionary(System.Object,System.Object,System.Object)">
            <summary>
            Adds a a key-value to a dictionary.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">No Add() method found on dictionary [{0}].DoFormat(Type)</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.IsDictionary(System.Type)">
            <summary>
            Determines whether the specified type is a .NET dictionary.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is dictionary; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.IsGenericDictionary">
            <summary>
            Gets a value indicating whether this instance is generic dictionary.
            </summary>
            <value><c>true</c> if this instance is generic dictionary; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.KeyType">
            <summary>
            Gets the type of the key.
            </summary>
            <value>The type of the key.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.DictionaryDescriptor.IsPureDictionary">
            <summary>
            Gets or sets a value indicating whether this instance is pure dictionary.
            </summary>
            <value><c>true</c> if this instance is pure dictionary; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.FieldDescriptor">
            <summary>
            A <see cref="T:YamlDotNet.Serialization.IMemberDescriptor"/> for a <see cref="P:YamlDotNet.Serialization.Descriptors.FieldDescriptor.FieldInfo"/>
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.MemberDescriptorBase">
            <summary>
            Base class for <see cref="T:YamlDotNet.Serialization.IMemberDescriptor"/> for a <see cref="P:YamlDotNet.Serialization.Descriptors.MemberDescriptorBase.MemberInfo"/>
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.IMemberDescriptor">
            <summary>
            Describe a member of an object.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.IMemberDescriptor.Get(System.Object)">
            <summary>
            Gets the value of this memeber for the specified instance.
            </summary>
            <param name="thisObject">The this object to get the value from.</param>
            <returns>Value of the member.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.IMemberDescriptor.Set(System.Object,System.Object)">
            <summary>
            Sets a value of this memeber for the specified instance.
            </summary>
            <param name="thisObject">The this object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.Order">
            <summary>
            Gets the order of this member. 
            Default is -1, meaning that it is using the alphabetical order 
            based on the name of this property.
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.SerializeMemberMode">
            <summary>
            Gets the mode of serialization for this member.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.HasSet">
            <summary>
            Gets a value indicating whether this instance has set method.
            </summary>
            <value><c>true</c> if this instance has set method; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.Style">
            <summary>
            Gets the default style attached to this member.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.IMemberDescriptor.ShouldSerialize">
            <summary>
            Gets a value indicating whether this member should be serialized.
            </summary>
            <value><c>true</c> if [should serialize]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.MemberDescriptorBase.DeclaringType">
            <summary>
            Gets the type of the declaring this member.
            </summary>
            <value>The type of the declaring.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.MemberDescriptorBase.MemberInfo">
            <summary>
            Gets the member information.
            </summary>
            <value>The member information.</value>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.FieldDescriptor.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.FieldDescriptor"/> class.
            </summary>
            <param name="fieldInfo">The property information.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.FieldDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.FieldDescriptor.FieldInfo">
            <summary>
            Gets the property information attached to this instance.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.NullableDescriptor">
            <summary>
            Describes a descriptor for a nullable type <see cref="T:System.Nullable`1"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.NullableDescriptor.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.ObjectDescriptor"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Type [{0}] is not a primitive</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.NullableDescriptor.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is nullable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.NullableDescriptor.UnderlyingType">
            <summary>
            Gets the type underlying type T of the nullable <see cref="T:System.Nullable`1"/>
            </summary>
            <value>The type of the element.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.PrimitiveDescriptor">
            <summary>
            Describes a descriptor for a primitive (bool, char, sbyte, byte, int, uint, long, ulong, float, double, decimal, string, DateTime).
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.PrimitiveDescriptor.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.ObjectDescriptor"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Type [{0}] is not a primitive</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.PrimitiveDescriptor.IsPrimitive(System.Type)">
            <summary>
            Determines whether the specified type is a primitive.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is primitive; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.PropertyDescriptor">
            <summary>
            A <see cref="T:YamlDotNet.Serialization.IMemberDescriptor"/> for a <see cref="P:YamlDotNet.Serialization.Descriptors.PropertyDescriptor.PropertyInfo"/>
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.PropertyDescriptor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.PropertyDescriptor"/> class.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.PropertyDescriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.PropertyDescriptor.PropertyInfo">
            <summary>
            Gets the property information attached to this instance.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.Descriptors.TypeDescriptorFactory">
            <summary>
            A default implementation for the <see cref="T:YamlDotNet.Serialization.ITypeDescriptorFactory"/>.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.ITypeDescriptorFactory">
            <summary>
            A factory to create an instance of a <see cref="T:YamlDotNet.Serialization.ITypeDescriptor"/>
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ITypeDescriptorFactory.Find(System.Type)">
            <summary>
            Tries to create an instance of a <see cref="T:YamlDotNet.Serialization.ITypeDescriptor"/> from the type. Return null if this factory is not handling this type.
            </summary>
            <param name="type">The type.</param>
            <returns>ITypeDescriptor.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.TypeDescriptorFactory.#ctor(YamlDotNet.Serialization.IAttributeRegistry,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Descriptors.TypeDescriptorFactory"/> class.
            </summary>
            <param name="attributeRegistry">The attribute registry.</param>
            <param name="emitDefaultValues">if set to <c>true</c> [emit default values].</param>
            <exception cref="T:System.ArgumentNullException">attributeRegistry</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Descriptors.TypeDescriptorFactory.Create(System.Type)">
            <summary>
            Creates a type descriptor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An instance of type descriptor.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.Descriptors.TypeDescriptorFactory.AttributeRegistry">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.DocumentLoadingState">
            <summary>
            Manages the state of a <see cref="T:YamlDotNet.Serialization.YamlDocument"/> while it is loading.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.DocumentLoadingState.AddAnchor(YamlDotNet.Serialization.YamlNode)">
            <summary>
            Adds the specified node to the anchor list.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.DocumentLoadingState.GetNode(System.String,System.Boolean,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Gets the node with the specified anchor.
            </summary>
            <param name="anchor">The anchor.</param>
            <param name="throwException">if set to <c>true</c>, the method should throw an exception if there is no node with that anchor.</param>
            <param name="start">The start position.</param>
            <param name="end">The end position.</param>
            <returns></returns>
        </member>
        <member name="M:YamlDotNet.Serialization.DocumentLoadingState.AddNodeWithUnresolvedAliases(YamlDotNet.Serialization.YamlNode)">
            <summary>
            Adds the specified node to the collection of nodes with unresolved aliases.
            </summary>
            <param name="node">
            The <see cref="T:YamlDotNet.Serialization.YamlNode"/> that has unresolved aliases.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.DocumentLoadingState.ResolveAliases">
            <summary>
            Resolves the aliases that could not be resolved while loading the document.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.DuplicateAnchorException">
            <summary>
            The exception that is thrown when a duplicate anchor is detected.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.DuplicateAnchorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.DuplicateAnchorException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.DuplicateAnchorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.DuplicateAnchorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.DuplicateAnchorException.#ctor(YamlDotNet.Mark,YamlDotNet.Mark,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.DuplicateAnchorException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.DuplicateAnchorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.DuplicateAnchorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:YamlDotNet.Serialization.EmitterState">
            <summary>
            Holds state that is used when emitting a stream.
            </summary>
        </member>
        <member name="P:YamlDotNet.Serialization.EmitterState.EmittedAnchors">
            <summary>
            Gets the already emitted anchors.
            </summary>
            <value>The emitted anchors.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.IAttributeRegistry">
            <summary>
            A registry for all attributes.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.IAttributeRegistry.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes associated with the specified member.
            </summary>
            <param name="memberInfo">The reflection member.</param>
            <param name="inherit">if set to <c>true</c> includes inherited attributes.</param>
            <returns>An enumeration of <see cref="T:System.Attribute"/>.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.IAttributeRegistry.Register(System.Reflection.MemberInfo,System.Attribute)">
            <summary>
            Registers an attribute for the specified member. Restriction: Attributes registered this way cannot be listed in inherited attributes.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:YamlDotNet.Serialization.AttributeRegistryExtensions">
            <summary>
            Extension methods for attribute registry.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.AttributeRegistryExtensions.GetAttributes``1(YamlDotNet.Serialization.IAttributeRegistry,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes associated with the specified member.
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>An enumeration of <see cref="T:System.Attribute"/>.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.AttributeRegistryExtensions.GetAttribute``1(YamlDotNet.Serialization.IAttributeRegistry,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the first attribute of type T associated with the specified member.
            </summary>
            <typeparam name="T">Type of the attribute</typeparam>
            <param name="memberInfo">The member information.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns>An attribute of type {T} if it was found; otherwise <c>null</c> </returns>
        </member>
        <member name="T:YamlDotNet.Serialization.ITagTypeRegistry">
            <summary>
            Prodives tag discovery from a type and type discovery from a tag.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ITagTypeRegistry.TypeFromTag(System.String)">
            <summary>
            Finds a type from a tag, null if not found.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns>A Type or null if not found</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.ITagTypeRegistry.TagFromType(System.Type)">
            <summary>
            Finds a tag from a type, null if not found.
            </summary>
            <param name="type">The type.</param>
            <returns>A tag or null if not found</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.ITagTypeRegistry.ResolveType(System.String)">
            <summary>
            Resolves a type from the specified typeName.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>Type found for this typeName</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.ITagTypeRegistry.RegisterAssembly(System.Reflection.Assembly,YamlDotNet.Serialization.IAttributeRegistry)">
            <summary>
            Registers an assembly when trying to resolve types. All types
            having <see cref="T:YamlDotNet.Serialization.YamlTagAttribute"/> will be registered
            automatically.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="attributeRegistry">The attribute registry to use when quering for <see cref="T:YamlDotNet.Serialization.YamlTagAttribute"/>.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.ITagTypeRegistry.RegisterTagMapping(System.String,System.Type)">
            <summary>
            Register a mapping between a tag and a type.
            </summary>
            <param name="tag">The tag.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:YamlDotNet.Serialization.IYamlVisitor">
            <summary>
            Defines the method needed to be able to visit Yaml elements.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlVisitor.Visit(YamlDotNet.Serialization.YamlStream)">
            <summary>
            Visits a <see cref="T:YamlDotNet.Serialization.YamlStream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:YamlDotNet.Serialization.YamlStream"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlVisitor.Visit(YamlDotNet.Serialization.YamlDocument)">
            <summary>
            Visits a <see cref="T:YamlDotNet.Serialization.YamlDocument"/>.
            </summary>
            <param name="document">
            The <see cref="T:YamlDotNet.Serialization.YamlDocument"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlVisitor.Visit(YamlDotNet.Serialization.YamlScalarNode)">
            <summary>
            Visits a <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/>.
            </summary>
            <param name="scalar">
            The <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlVisitor.Visit(YamlDotNet.Serialization.YamlSequenceNode)">
            <summary>
            Visits a <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/>.
            </summary>
            <param name="sequence">
            The <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlVisitor.Visit(YamlDotNet.Serialization.YamlMappingNode)">
            <summary>
            Visits a <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/>.
            </summary>
            <param name="mapping">
            The <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> that is being visited.
            </param>
        </member>
        <member name="T:YamlDotNet.Serialization.LambdaObjectFactory">
            <summary>
            Creates objects using a Func{Type,object}"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.LambdaObjectFactory.#ctor(System.Func{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.LambdaObjectFactory"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.LambdaObjectFactory.#ctor(System.Func{System.Type,System.Object},YamlDotNet.Serialization.IObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.LambdaObjectFactory"/> class.
            </summary>
            <param name="factory">The factory.</param>
            <param name="nextFactory">The next factory.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="T:YamlDotNet.Serialization.IYamlSerializable">
            <summary>
            Allows an object to customize how it is serialized and deserialized.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlSerializable.ReadYaml(YamlDotNet.Serialization.SerializerContext,System.Object,YamlDotNet.Serialization.ITypeDescriptor)">
            <summary>
            Reads this object's state from a YAML parser.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
            <param name="typeDescriptor">The type descriptor.</param>
            <returns>A instance of the object deserialized from Yaml.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlSerializable.WriteYaml(YamlDotNet.Serialization.SerializerContext,YamlDotNet.Serialization.ValueInput,YamlDotNet.Serialization.ITypeDescriptor)">
            <summary>
            Writes this object's state to a YAML emitter.
            </summary>
            <param name="context">The context.</param>
            <param name="value">The value.</param>
            <param name="typeDescriptor"></param>
        </member>
        <member name="T:YamlDotNet.Serialization.IYamlSerializableFactory">
            <summary>
            A factory of <see cref="T:YamlDotNet.Serialization.IYamlSerializable"/>
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.IYamlSerializableFactory.TryCreate(YamlDotNet.Serialization.SerializerContext,YamlDotNet.Serialization.ITypeDescriptor)">
            <summary>
            Try to create a <see cref="T:YamlDotNet.Serialization.IYamlSerializable"/> or return null if not supported for a particular .NET typeDescriptor.
            </summary>
            <param name="context"></param>
            <param name="typeDescriptor">The typeDescriptor.</param>
            <returns>If supported, return an instance of <see cref="T:YamlDotNet.Serialization.IYamlSerializable"/> else return <c>null</c>.</returns>
        </member>
        <member name="T:YamlDotNet.Serialization.Serializers.ObjectSerializer">
            <summary>
            Base class for serializing an object that can be a Yaml !!map or !!seq.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializers.ObjectSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Serializers.ObjectSerializer"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializers.ObjectSerializer.CheckIsSequence(YamlDotNet.Serialization.ITypeDescriptor)">
            <summary>
            Checks if a type is a sequence.
            </summary>
            <param name="typeDescriptor">The type descriptor.</param>
            <returns><c>true</c> if a type is a sequence, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:YamlDotNet.Serialization.Serializers.RoutingSerializer">
            <summary>
            This serializer is responsible to route to a specific serializer.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.SerializerContext">
            <summary>
            A context used while deserializing.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.#ctor(YamlDotNet.Serialization.Serializer)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.SerializerContext"/> class.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.ReadYaml(System.Object,System.Type)">
            <summary>
            The default function to read an object from the current Yaml stream.
            </summary>
            <param name="value">The value of the receiving object, may be null.</param>
            <param name="expectedType">The expected type.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.WriteYaml(System.Object,System.Type)">
            <summary>
            The default function to write an object to Yaml
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.FindTypeDescriptor(System.Type)">
            <summary>
            Finds the type descriptor for the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An instance of <see cref="T:YamlDotNet.Serialization.ITypeDescriptor"/>.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.TypeFromTag(System.String)">
            <summary>
            Resolves a type from the specified tag.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <returns>Type.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.TagFromType(System.Type)">
            <summary>
            Resolves a tag from a type
            </summary>
            <param name="type">The type.</param>
            <returns>The associated tag</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.ResolveType(System.String)">
            <summary>
            Resolves a type from the specified typename using registered assemblies.
            </summary>
            <param name="typeFullName">Full name of the type.</param>
            <returns>The type of null if not found</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.TryParseScalar(YamlDotNet.Events.Scalar,System.String@,System.Object@)">
            <summary>
            Gets the default tag and value for the specified <see cref="T:YamlDotNet.Events.Scalar"/>. The default tag can be different from a actual tag of this <see cref="T:YamlDotNet.Events.NodeEvent"/>.
            </summary>
            <param name="scalar">The scalar event.</param>
            <param name="defaultTag">The default tag decoded from the scalar.</param>
            <param name="value">The value extracted from a scalar.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.GetAliasValue(YamlDotNet.Events.AnchorAlias)">
            <summary>
            Gets the alias value.
            </summary>
            <param name="alias">The alias.</param>
            <returns>System.Object.</returns>
            <exception cref="T:System.ArgumentNullException">alias</exception>
            <exception cref="T:YamlDotNet.Serialization.AnchorNotFoundException">Alias [{0}] not found.DoFormat(alias.Value)</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.AddAliasBinding(YamlDotNet.Events.AnchorAlias,System.Action{System.Object})">
            <summary>
            Adds the late binding.
            </summary>
            <param name="alias">The alias.</param>
            <param name="setter">The setter.</param>
            <exception cref="T:System.ArgumentException">No alias found in the ValueOutput;valueResult</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.PushStyle(YamlDotNet.YamlStyle)">
            <summary>
            Pushes a style for the next element to be emitted.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerContext.PopStyle">
            <summary>
            Pops the current style.
            </summary>
            <returns>The current style.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.IsSerializing">
            <summary>
            Gets a value indicating whether we are in the context of serializing.
            </summary>
            <value><c>true</c> if we are in the context of serializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.Schema">
            <summary>
            Gets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.Reader">
            <summary>
            Gets the reader used while deserializing.
            </summary>
            <value>The reader.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.ObjectFactory">
            <summary>
            Gets or sets the type of the create.
            </summary>
            <value>The type of the create.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerContext.Writer">
            <summary>
            Gets the writer used while deserializing.
            </summary>
            <value>The writer.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.AttributeRegistry">
            <summary>
            A default implementation for <see cref="T:YamlDotNet.Serialization.IAttributeRegistry"/>. 
            This implementation allows to retrieve default attributes for a member or 
            to attach an attribute to a specific type/member.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.AttributeRegistry.GetAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the attributes associated with the specified member.
            </summary>
            <param name="memberInfo">The reflection member.</param>
            <param name="inherit">if set to <c>true</c> includes inherited attributes.</param>
            <returns>An enumeration of <see cref="T:System.Attribute"/>.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.AttributeRegistry.Register(System.Reflection.MemberInfo,System.Attribute)">
            <summary>
            Registers an attribute for the specified member. Restriction: Attributes registered this way cannot be listed in inherited attributes.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="T:YamlDotNet.Serialization.TagTypeRegistry">
            <summary>
            Default implementation of ITagTypeRegistry.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.TagTypeRegistry.#ctor(YamlDotNet.Schemas.IYamlSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.TagTypeRegistry"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.TagTypeRegistry.RegisterTagMapping(System.String,System.Type)">
            <summary>
            Register a mapping between a tag and a type.
            </summary>
            <param name="tag">The tag.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:YamlDotNet.Serialization.TagTypeRegistry.UseShortTypeName">
            <summary>
            Gets or sets a value indicating whether [use short type name].
            </summary>
            <value><c>true</c> if [use short type name]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.ValueInput">
            <summary>
            A value to serialize.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ValueInput.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.ValueInput"/> struct that contains a value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.ValueInput.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.ValueInput"/> struct with its value and associated tag.
            </summary>
            <param name="value">The value.</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.ValueInput.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.ValueInput.Value">
            <summary>
            The returned value or null if no value.
            </summary>
        </member>
        <member name="P:YamlDotNet.Serialization.ValueInput.Tag">
            <summary>
            Gets the tag attached to this value.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.ValueOutput">
            <summary>
            A deserialized value used by <see cref="M:YamlDotNet.Serialization.IYamlSerializable.ReadYaml(YamlDotNet.Serialization.SerializerContext,System.Object,YamlDotNet.Serialization.ITypeDescriptor)"/> that
            can be a direct value or an alias. This is used to handle for forward alias.
            If an alias is found in a <see cref="T:YamlDotNet.Serialization.ValueOutput"/>, the caller usually
            register a late binding instruction through <see cref="M:YamlDotNet.Serialization.SerializerContext.AddAliasBinding(YamlDotNet.Events.AnchorAlias,System.Action{System.Object})"/>
            that will be called once the whole document has been parsed, in order to 
            resolve all remaining aliases.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ValueOutput.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.ValueOutput"/> struct that contains a value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.ValueOutput.#ctor(YamlDotNet.Events.AnchorAlias)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.ValueOutput"/> struct that contains an <see cref="T:YamlDotNet.Events.AnchorAlias"/>.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="F:YamlDotNet.Serialization.ValueOutput.Value">
            <summary>
            The returned value or null if no value.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.ValueOutput.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:YamlDotNet.Serialization.ValueOutput.IsAlias">
            <summary>
            True if this value result is an alias.
            </summary>
        </member>
        <member name="P:YamlDotNet.Serialization.ValueOutput.Alias">
            <summary>
            Gets the alias, only valid if <see cref="P:YamlDotNet.Serialization.ValueOutput.IsAlias"/> is true, null otherwise.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlAliasNode">
            <summary>
            Represents an alias node in the YAML document.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlNode">
            <summary>
            Represents a single node in the YAML document.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.Load(YamlDotNet.Events.NodeEvent,YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Loads the specified event.
            </summary>
            <param name="yamlEvent">The event.</param>
            <param name="state">The state of the document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.ParseNode(YamlDotNet.EventReader,YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Parses the node represented by the next event in <paramref name="events" />.
            </summary>
            <param name="events">The events.</param>
            <param name="state">The state.</param>
            <returns>Returns the node that has been parsed.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.ResolveAliases(YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Resolves the aliases that could not be resolved when the node was created.
            </summary>
            <param name="state">The state of the document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.Save(YamlDotNet.IEmitter,YamlDotNet.Serialization.EmitterState)">
            <summary>
            Saves the current node to the specified emitter.
            </summary>
            <param name="emitter">The emitter where the node is to be saved.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.Emit(YamlDotNet.IEmitter,YamlDotNet.Serialization.EmitterState)">
            <summary>
            Saves the current node to the specified emitter.
            </summary>
            <param name="emitter">The emitter where the node is to be saved.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.Equals(YamlDotNet.Serialization.YamlNode)">
            <summary>
            Provides a basic implementation of Object.Equals 
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.SafeEquals(System.Object,System.Object)">
            <summary>
            Gets a value indicating whether two objects are equal.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.GetHashCode(System.Object)">
            <summary>
            Gets the hash code of the specified object, or zero if the object is null. 
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNode.CombineHashCodes(System.Int32,System.Int32)">
            <summary>
            Combines two hash codes into one. 
            </summary>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlNode.Anchor">
            <summary>
            Gets or sets the anchor of the node.
            </summary>
            <value>The anchor.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlNode.Tag">
            <summary>
            Gets or sets the tag of the node.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlNode.Start">
            <summary>
            Gets the position in the input stream where the event that originated the node starts.
            </summary>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlNode.End">
            <summary>
            Gets the position in the input stream where the event that originated the node ends.
            </summary>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlNode.AllNodes">
            <summary>
            Gets all nodes from the document, starting on the current node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlAliasNode"/> class.
            </summary>
            <param name="anchor">The anchor.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.ResolveAliases(YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Resolves the aliases that could not be resolved when the node was created.
            </summary>
            <param name="state">The state of the document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.Emit(YamlDotNet.IEmitter,YamlDotNet.Serialization.EmitterState)">
            <summary>
            Saves the current node to the specified emitter.
            </summary>
            <param name="emitter">The emitter where the node is to be saved.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlAliasNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlAliasNode.AllNodes">
            <summary>
            Gets all nodes from the document, starting on the current node.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlDocument">
            <summary>
            Represents an YAML document.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlDocument.#ctor(YamlDotNet.Serialization.YamlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlDocument"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlDocument"/> class with a single scalar node.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlDocument.#ctor(YamlDotNet.EventReader)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlDocument"/> class.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlDocument.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlDocument.RootNode">
            <summary>
            Gets or sets the root node.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlDocument.AllNodes">
            <summary>
            Gets all nodes from the document.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlDocument.AnchorAssigningVisitor">
            <summary>
            Visitor that assigns anchors to nodes that are referenced more than once but have no anchor.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlVisitor">
            <summary>
            Abstract implementation of <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/> that knows how to walk a complete Yaml object model.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visit(YamlDotNet.Serialization.YamlStream)">
            <summary>
            Called when this object is visiting a <see cref="T:YamlDotNet.Serialization.YamlStream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:YamlDotNet.Serialization.YamlStream"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visited(YamlDotNet.Serialization.YamlStream)">
            <summary>
            Called after this object finishes visiting a <see cref="T:YamlDotNet.Serialization.YamlStream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:YamlDotNet.Serialization.YamlStream"/> that has been visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visit(YamlDotNet.Serialization.YamlDocument)">
            <summary>
            Called when this object is visiting a <see cref="T:YamlDotNet.Serialization.YamlDocument"/>.
            </summary>
            <param name="document">
            The <see cref="T:YamlDotNet.Serialization.YamlDocument"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visited(YamlDotNet.Serialization.YamlDocument)">
            <summary>
            Called after this object finishes visiting a <see cref="T:YamlDotNet.Serialization.YamlDocument"/>.
            </summary>
            <param name="document">
            The <see cref="T:YamlDotNet.Serialization.YamlDocument"/> that has been visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visit(YamlDotNet.Serialization.YamlScalarNode)">
            <summary>
            Called when this object is visiting a <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/>.
            </summary>
            <param name="scalar">
            The <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visited(YamlDotNet.Serialization.YamlScalarNode)">
            <summary>
            Called after this object finishes visiting a <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/>.
            </summary>
            <param name="scalar">
            The <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> that has been visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visit(YamlDotNet.Serialization.YamlSequenceNode)">
            <summary>
            Called when this object is visiting a <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/>.
            </summary>
            <param name="sequence">
            The <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visited(YamlDotNet.Serialization.YamlSequenceNode)">
            <summary>
            Called after this object finishes visiting a <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/>.
            </summary>
            <param name="sequence">
            The <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> that has been visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visit(YamlDotNet.Serialization.YamlMappingNode)">
            <summary>
            Called when this object is visiting a <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/>.
            </summary>
            <param name="mapping">
            The <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.Visited(YamlDotNet.Serialization.YamlMappingNode)">
            <summary>
            Called after this object finishes visiting a <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/>.
            </summary>
            <param name="mapping">
            The <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> that has been visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.VisitChildren(YamlDotNet.Serialization.YamlStream)">
            <summary>
            Visits every child of a <see cref="T:YamlDotNet.Serialization.YamlStream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:YamlDotNet.Serialization.YamlStream"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.VisitChildren(YamlDotNet.Serialization.YamlDocument)">
            <summary>
            Visits every child of a <see cref="T:YamlDotNet.Serialization.YamlDocument"/>.
            </summary>
            <param name="document">
            The <see cref="T:YamlDotNet.Serialization.YamlDocument"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.VisitChildren(YamlDotNet.Serialization.YamlSequenceNode)">
            <summary>
            Visits every child of a <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/>.
            </summary>
            <param name="sequence">
            The <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> that is being visited.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlVisitor.VisitChildren(YamlDotNet.Serialization.YamlMappingNode)">
            <summary>
            Visits every child of a <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/>.
            </summary>
            <param name="mapping">
            The <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> that is being visited.
            </param>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlIgnoreAttribute">
            <summary>
            Instructs the YamlSerializer not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlMappingNode">
            <summary>
            Represents a mapping node in the YAML document.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.#ctor(YamlDotNet.EventReader,YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> class.
            </summary>
            <param name="events">The events.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.#ctor(System.Collections.Generic.KeyValuePair{YamlDotNet.Serialization.YamlNode,YamlDotNet.Serialization.YamlNode}[])">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{YamlDotNet.Serialization.YamlNode,YamlDotNet.Serialization.YamlNode}})">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.#ctor(YamlDotNet.Serialization.YamlNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> class.
            </summary>
            <param name="children">A sequence of <see cref="T:YamlDotNet.Serialization.YamlNode"/> where even elements are keys and odd elements are values.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.#ctor(System.Collections.Generic.IEnumerable{YamlDotNet.Serialization.YamlNode})">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMappingNode"/> class.
            </summary>
            <param name="children">A sequence of <see cref="T:YamlDotNet.Serialization.YamlNode"/> where even elements are keys and odd elements are values.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Add(YamlDotNet.Serialization.YamlNode,YamlDotNet.Serialization.YamlNode)">
            <summary>
            Adds the specified mapping to the <see cref="P:YamlDotNet.Serialization.YamlMappingNode.Children"/> collection.
            </summary>
            <param name="key">The key node.</param>
            <param name="value">The value node.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Add(System.String,YamlDotNet.Serialization.YamlNode)">
            <summary>
            Adds the specified mapping to the <see cref="P:YamlDotNet.Serialization.YamlMappingNode.Children"/> collection.
            </summary>
            <param name="key">The key node.</param>
            <param name="value">The value node.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Add(YamlDotNet.Serialization.YamlNode,System.String)">
            <summary>
            Adds the specified mapping to the <see cref="P:YamlDotNet.Serialization.YamlMappingNode.Children"/> collection.
            </summary>
            <param name="key">The key node.</param>
            <param name="value">The value node.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Add(System.String,System.String)">
            <summary>
            Adds the specified mapping to the <see cref="P:YamlDotNet.Serialization.YamlMappingNode.Children"/> collection.
            </summary>
            <param name="key">The key node.</param>
            <param name="value">The value node.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.ResolveAliases(YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Resolves the aliases that could not be resolved when the node was created.
            </summary>
            <param name="state">The state of the document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Emit(YamlDotNet.IEmitter,YamlDotNet.Serialization.EmitterState)">
            <summary>
            Saves the current node to the specified emitter.
            </summary>
            <param name="emitter">The emitter where the node is to be saved.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMappingNode.GetEnumerator">
            <summary />
        </member>
        <member name="P:YamlDotNet.Serialization.YamlMappingNode.Children">
            <summary>
            Gets the children of the current node.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlMappingNode.Style">
            <summary>
            Gets or sets the style of the node.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlMappingNode.AllNodes">
            <summary>
            Gets all nodes from the document, starting on the current node.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlMemberAttribute">
            <summary>
            Specify the way to store a property or field of some class or structure.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMemberAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMemberAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlMemberAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMemberAttribute.#ctor(System.String,YamlDotNet.Serialization.SerializeMemberMode)">
            <summary>
            Specify the way to store a property or field of some class or structure.
            </summary>
            <param name="name">The name.</param>
            <param name="serializeMethod">The serialize method.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlMemberAttribute.#ctor(YamlDotNet.Serialization.SerializeMemberMode)">
            <summary>
            Specify the way to store a property or field of some class or structure.
            </summary>
            <param name="serializeMethod">The serialize method.</param>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlMemberAttribute.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlMemberAttribute.SerializeMethod">
            <summary>
            Gets the serialize method1.
            </summary>
            <value>The serialize method1.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlMemberAttribute.Order">
            <summary>
            Gets or sets the order. Default is -1 (default to alphabetical)
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlNodeIdentityEqualityComparer">
            <summary>
            Comparer that is based on identity comparisons.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNodeIdentityEqualityComparer.Equals(YamlDotNet.Serialization.YamlNode,YamlDotNet.Serialization.YamlNode)">
            <summary />
        </member>
        <member name="M:YamlDotNet.Serialization.YamlNodeIdentityEqualityComparer.GetHashCode(YamlDotNet.Serialization.YamlNode)">
            <summary />
        </member>
        <member name="T:YamlDotNet.Serialization.YamlScalarNode">
            <summary>
            Represents a scalar node in the YAML document.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.#ctor(YamlDotNet.EventReader,YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> class.
            </summary>
            <param name="events">The events.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.ResolveAliases(YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Resolves the aliases that could not be resolved when the node was created.
            </summary>
            <param name="state">The state of the document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.Emit(YamlDotNet.IEmitter,YamlDotNet.Serialization.EmitterState)">
            <summary>
            Saves the current node to the specified emitter.
            </summary>
            <param name="emitter">The emitter where the node is to be saved.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.op_Implicit(System.String)~YamlDotNet.Serialization.YamlScalarNode">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.op_Explicit(YamlDotNet.Serialization.YamlScalarNode)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:YamlDotNet.Serialization.YamlScalarNode"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlScalarNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlScalarNode.Value">
            <summary>
            Gets or sets the value of the node.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlScalarNode.Style">
            <summary>
            Gets or sets the style of the node.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlScalarNode.AllNodes">
            <summary>
            Gets all nodes from the document, starting on the current node.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlSequenceNode">
            <summary>
            Represents a sequence node in the YAML document.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.#ctor(YamlDotNet.EventReader,YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> class.
            </summary>
            <param name="events">The events.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.#ctor(YamlDotNet.Serialization.YamlNode[])">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.#ctor(System.Collections.Generic.IEnumerable{YamlDotNet.Serialization.YamlNode})">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlSequenceNode"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.Add(YamlDotNet.Serialization.YamlNode)">
            <summary>
            Adds the specified child to the <see cref="P:YamlDotNet.Serialization.YamlSequenceNode.Children"/> collection.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.Add(System.String)">
            <summary>
            Adds a scalar node to the <see cref="P:YamlDotNet.Serialization.YamlSequenceNode.Children"/> collection.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.ResolveAliases(YamlDotNet.Serialization.DocumentLoadingState)">
            <summary>
            Resolves the aliases that could not be resolved when the node was created.
            </summary>
            <param name="state">The state of the document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.Emit(YamlDotNet.IEmitter,YamlDotNet.Serialization.EmitterState)">
            <summary>
            Saves the current node to the specified emitter.
            </summary>
            <param name="emitter">The emitter where the node is to be saved.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlSequenceNode.GetEnumerator">
            <summary />
        </member>
        <member name="P:YamlDotNet.Serialization.YamlSequenceNode.Children">
            <summary>
            Gets the collection of child nodes.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlSequenceNode.Style">
            <summary>
            Gets or sets the style of the node.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlSequenceNode.AllNodes">
            <summary>
            Gets all nodes from the document, starting on the current node.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.SerializeMemberMode">
            <summary>
            <para>Specify the way to store a property or field of some class or structure.</para>
            <para>See <see cref="T:YamlDotNet.Serialization.Serializer"/> for detail.</para>
            </summary>
        </member>
        <member name="F:YamlDotNet.Serialization.SerializeMemberMode.Default">
            <summary>
            Use the default mode depending on the type of the field/property.
            </summary>
        </member>
        <member name="F:YamlDotNet.Serialization.SerializeMemberMode.Assign">
            <summary>
            When restored, new object is created by using the parameters in
            the YAML data and assigned to the property / field. When the
            property / filed is writeable, this is the default.
            </summary>
        </member>
        <member name="F:YamlDotNet.Serialization.SerializeMemberMode.Content">
            <summary>
             Only valid for a property / field that has a class or struct type.
             When restored, instead of recreating the whole class or struct,
             the members are independently restored. When the property / field
             is not writeable this is the default.
            </summary>
        </member>
        <member name="F:YamlDotNet.Serialization.SerializeMemberMode.Binary">
            <summary>
             Only valid for a property / field that has an  array type of a 
             some value type. The content of the array is stored in a binary
             format encoded in base64 style.
            </summary>
        </member>
        <member name="F:YamlDotNet.Serialization.SerializeMemberMode.Never">
            <summary>
            The property / field will not be stored.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.Serializer">
            <summary>
            Serializes and deserializes objects into and from YAML documents.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Serializer"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.#ctor(YamlDotNet.Serialization.SerializerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.Serializer"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object to a string.
            </summary>
            <param name="graph">The graph.</param>
            <returns>A YAML string of the object.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes the specified object to a string.
            </summary>
            <param name="graph">The graph.</param>
            <param name="expectedType">The expected type.</param>
            <returns>A YAML string of the object.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="stream">The stream.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(System.IO.Stream,System.Object,System.Type)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="stream">The stream.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> where to serialize the object.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> where to serialize the object.</param>
            <param name="graph">The object to serialize.</param>
            <param name="type">The static type of the object to serialize.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(YamlDotNet.IEmitter,System.Object)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="emitter">The <see cref="T:YamlDotNet.IEmitter"/> where to serialize the object.</param>
            <param name="graph">The object to serialize.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Serialize(YamlDotNet.IEmitter,System.Object,System.Type)">
            <summary>
            Serializes the specified object.
            </summary>
            <param name="emitter">The <see cref="T:YamlDotNet.IEmitter"/> where to serialize the object.</param>
            <param name="graph">The object to serialize.</param>
            <param name="type">The static type of the object to serialize.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream.</param>
            <returns>A deserialized object.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(System.IO.TextReader)">
            <summary>
            Deserializes an object from the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The reader.</param>
            <returns>A deserialized object.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from the specified <see cref="T:System.IO.Stream"/> with an expected specific type.
            </summary>
            <param name="stream">The stream.</param>
            <param name="expectedType">The expected type.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes an object from the specified <see cref="T:System.IO.Stream"/> with an expected specific type.
            </summary>
            <typeparam name="T">The expected type</typeparam>
            <param name="stream">The stream.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes an object from the specified <see cref="T:System.IO.TextReader"/> with an expected specific type.
            </summary>
            <param name="reader">The reader.</param>
            <param name="expectedType">The expected type.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize``1(System.IO.TextReader)">
            <summary>
            Deserializes an object from the specified <see cref="T:System.IO.TextReader"/> with an expected specific type.
            </summary>
            <typeparam name="T">The expected type</typeparam>
            <param name="reader">The reader.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(System.String)">
            <summary>
            Deserializes an object from the specified string.
            </summary>
            <param name="fromText">The text.</param>
            <returns>A deserialized object.</returns>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes an object from the specified string. with an expected specific type.
            </summary>
            <param name="fromText">From text.</param>
            <param name="expectedType">The expected type.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize``1(System.String)">
            <summary>
            Deserializes an object from the specified string. with an expected specific type.
            </summary>
            <typeparam name="T">The expected type</typeparam>
            <param name="fromText">From text.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">stream</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize``1(YamlDotNet.EventReader)">
            <summary>
            Deserializes an object from the specified <see cref="T:YamlDotNet.EventReader"/> with an expected specific type.
            </summary>
            <typeparam name="T">The expected type</typeparam>
            <param name="reader">The reader.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="M:YamlDotNet.Serialization.Serializer.Deserialize(YamlDotNet.EventReader,System.Type)">
            <summary>
            Deserializes an object from the specified <see cref="T:YamlDotNet.EventReader"/> with an expected specific type.
            </summary>
            <param name="reader">The reader.</param>
            <param name="expectedType">The expected type.</param>
            <returns>A deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">reader</exception>
        </member>
        <member name="P:YamlDotNet.Serialization.Serializer.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.SerializerSettings">
            <summary>
            Settings used to configure serialization and control how objects are encoded into YAML.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.SerializerSettings"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerSettings.#ctor(YamlDotNet.Schemas.IYamlSchema)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.SerializerSettings"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerSettings.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Register a mapping between a tag and a type.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerSettings.RegisterTagMapping(System.String,System.Type)">
            <summary>
            Register a mapping between a tag and a type.
            </summary>
            <param name="tagName">Name of the tag.</param>
            <param name="tagType">Type of the tag.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerSettings.RegisterSerializer(System.Type,YamlDotNet.Serialization.IYamlSerializable)">
            <summary>
            Adds a custom serializer for the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="serializer">The serializer.</param>
            <exception cref="T:System.ArgumentNullException">
            type
            or
            serializer
            </exception>
        </member>
        <member name="M:YamlDotNet.Serialization.SerializerSettings.RegisterSerializerFactory(YamlDotNet.Serialization.IYamlSerializableFactory)">
            <summary>
            Adds a serializer factory.
            </summary>
            <param name="factory">The factory.</param>
            <exception cref="T:System.ArgumentNullException">factory</exception>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.PreferredIndent">
            <summary>
            Gets or sets the preferred indentation. Default is 2.
            </summary>
            <value>The preferred indentation.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">value;Expecting value &gt; 0</exception>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.EmitAlias">
            <summary>
            Gets or sets a value indicating whether to emit anchor alias. Default is true.
            </summary>
            <value><c>true</c> to emit anchor alias; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.IndentLess">
            <summary>
            Gets or sets a value indicating whether the identation is trying to less
            indent when possible
            (For example, sequence after a key are not indented). Default is false.
            </summary>
            <value><c>true</c> if [always indent]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.SortKeyForMapping">
            <summary>
            Gets or sets a value indicating whether to enable sorting keys from dictionary to YAML mapping. Default is true. See remarks.
            </summary>
            <value><c>true</c> to enable sorting keys from dictionary to YAML mapping; otherwise, <c>false</c>.</value>
            <remarks>When storing a YAML document, It can be important to keep the same order for key mapping in order to keep
            a YAML document versionable/diffable.</remarks>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.EmitJsonComptible">
            <summary>
            Gets or sets a value indicating whether to emit JSON compatible YAML.
            </summary>
            <value><c>true</c> if to emit JSON compatible YAML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.EmitCapacityForList">
            <summary>
            Gets or sets a value indicating whether the property <see cref="P:System.Collections.Generic.List`1.Capacity"/> should be emitted. Default is false.
            </summary>
            <value><c>true</c> if the property <see cref="P:System.Collections.Generic.List`1.Capacity"/> should be emitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.LimitPrimitiveFlowSequence">
            <summary>
            Gets or sets the maximum number of elements an array/list of primitive can be emitted as a
            flow sequence (instead of a block sequence by default). Default is 0, meaning block style
            for all sequuences.
            </summary>
            <value>The emit compact array limit.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.EmitDefaultValues">
            <summary>
            Gets or sets a value indicating whether to emit default value. Default is false.
            </summary>
            <value><c>true</c> if to emit default value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.EmitShortTypeName">
            <summary>
            Gets or sets a value indicating whether to emit short type name (type, assembly name) or full <see cref="P:System.Type.AssemblyQualifiedName"/>. Default is false.
            </summary>
            <value><c>true</c> to emit short type name; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.DefaultStyle">
            <summary>
            Gets or sets the default <see cref="T:YamlDotNet.YamlStyle"/>. Default is <see cref="F:YamlDotNet.YamlStyle.Block"/>. See <see cref="P:YamlDotNet.Serialization.SerializerSettings.DynamicStyleFormat"/> to understand the resolution of styles.
            </summary>
            <value>The default style.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.DynamicStyleFormat">
            <summary>
            Gets or sets a <see cref="T:YamlDotNet.Serialization.IDynamicStyleFormat"/> to allow switching <see cref="T:YamlDotNet.YamlStyle"/> dynamically based
            on the element being serialized. See remarks.
            </summary>
            <value>The dynamic style format.</value>
            <remarks>
            The order to resolve a style is:
            <ul>
            <li>First try to get a style from <see cref="P:YamlDotNet.Serialization.SerializerSettings.DynamicStyleFormat"/>, if null or returns <see cref="F:YamlDotNet.YamlStyle.Any"/></li>
            <li>Second try to resolve the style from the property/field being serialized with the attribute <see cref="T:YamlDotNet.Serialization.YamlStyleAttribute"/>, if it is different from <see cref="F:YamlDotNet.YamlStyle.Any"/> </li>
            <li>Third  try to resolve the style from the type being serialized with the attribute <see cref="T:YamlDotNet.Serialization.YamlStyleAttribute"/>, if it is different from <see cref="F:YamlDotNet.YamlStyle.Any"/> </li>
            <li>If <see cref="P:YamlDotNet.Serialization.SerializerSettings.LimitPrimitiveFlowSequence"/> is &gt; 0, use flow sequence for list/array of primitives less that the value defined in <see cref="P:YamlDotNet.Serialization.SerializerSettings.LimitPrimitiveFlowSequence"/> </li>
            <li>Else use the default style <see cref="P:YamlDotNet.Serialization.SerializerSettings.DefaultStyle"/></li>
            </ul>
            </remarks>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.SpecialCollectionMember">
            <summary>
            Gets or sets the prefix used to serialize items for a non pure <see cref="T:System.Collections.IDictionary"/> or
            <see cref="T:System.Collections.ICollection"/>
            . Default to "~Items", see remarks.
            </summary>
            <value>The prefix for items.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <exception cref="T:System.ArgumentException">Expecting length &gt;= 2 and at least a special character '.', '~', '-' (not starting on first char for '-')</exception>
            <remarks>A pure <see cref="T:System.Collections.IDictionary"/> or <see cref="T:System.Collections.ICollection"/> is a class that inherits from these types but are not adding any
            public properties or fields. When these types are pure, they are respectively serialized as a YAML mapping (for dictionary) or a YAML sequence (for collections).
            If the collection type to serialize is not pure, the type is serialized as a YAML mapping sequence that contains the public properties/fields as well as a
            special fielx (e.g. "~Items") that contains the actual items of the collection (either a mapping for dictionary or a sequence for collections).
            The <see cref="P:YamlDotNet.Serialization.SerializerSettings.SpecialCollectionMember"/> is this special key that is used when serializing items of a non-pure collection.</remarks>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.Attributes">
            <summary>
            Gets the attribute registry.
            </summary>
            <value>The attribute registry.</value>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.ObjectFactory">
            <summary>
            Gets or sets the default factory to instantiate a type. Default is <see cref="T:YamlDotNet.Serialization.DefaultObjectFactory"/>.
            </summary>
            <value>The default factory to instantiate a type.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="P:YamlDotNet.Serialization.SerializerSettings.Schema">
            <summary>
            Gets or sets the schema. Default is <see cref="T:YamlDotNet.Schemas.CoreSchema"/>.
            method.
            </summary>
            <value>The schema.</value>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlStream">
            <summary>
            Represents an YAML stream.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlStream"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.#ctor(YamlDotNet.Serialization.YamlDocument[])">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlStream"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.#ctor(System.Collections.Generic.IEnumerable{YamlDotNet.Serialization.YamlDocument})">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlStream"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.Add(YamlDotNet.Serialization.YamlDocument)">
            <summary>
            Adds the specified document to the <see cref="P:YamlDotNet.Serialization.YamlStream.Documents"/> collection.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.Load(System.IO.TextReader)">
            <summary>
            Loads the stream from the specified input.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.Save(System.IO.TextWriter)">
            <summary>
            Saves the stream to the specified output.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.Accept(YamlDotNet.Serialization.IYamlVisitor)">
            <summary>
            Accepts the specified visitor by calling the appropriate Visit method on it.
            </summary>
            <param name="visitor">
            A <see cref="T:YamlDotNet.Serialization.IYamlVisitor"/>.
            </param>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStream.GetEnumerator">
            <summary />
        </member>
        <member name="P:YamlDotNet.Serialization.YamlStream.Documents">
            <summary>
            Gets the documents inside the stream.
            </summary>
            <value>The documents.</value>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlTagAttribute">
            <summary>
            An attribute to associate a tag with a particular type.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlTagAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlTagAttribute"/> class.
            </summary>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlTagAttribute.Tag">
            <summary>
            Gets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:YamlDotNet.SimpleKey">
            <summary>
            Represents a simple key.
            </summary>
        </member>
        <member name="M:YamlDotNet.SimpleKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SimpleKey"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.SimpleKey.#ctor(System.Boolean,System.Boolean,System.Int32,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SimpleKey"/> class.
            </summary>
        </member>
        <member name="P:YamlDotNet.SimpleKey.IsPossible">
            <summary>
            Gets or sets a value indicating whether this instance is possible.
            </summary>
            <value>
            	<c>true</c> if this instance is possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YamlDotNet.SimpleKey.IsRequired">
            <summary>
            Gets or sets a value indicating whether this instance is required.
            </summary>
            <value>
            	<c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:YamlDotNet.SimpleKey.TokenNumber">
            <summary>
            Gets or sets the token number.
            </summary>
            <value>The token number.</value>
        </member>
        <member name="P:YamlDotNet.SimpleKey.Mark">
            <summary>
            Gets or sets the mark that indicates the location of the simple key.
            </summary>
            <value>The mark.</value>
        </member>
        <member name="T:YamlDotNet.StringExtension">
            <summary>
            Add extensions methods to <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.StringExtension.DoFormat(System.String,System.Object[])">
            <summary>
            Expression of string.Format(this, arg1, arg2, ...)
            </summary>
            <param name="format">The format string.</param>
            <param name="args">The arguments.</param>
            <returns>A formatted string.</returns>
            <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>
        </member>
        <member name="T:YamlDotNet.SyntaxErrorException">
            <summary>
            Exception that is thrown when a syntax error is detected on a YAML stream.
            </summary>
        </member>
        <member name="M:YamlDotNet.SyntaxErrorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SyntaxErrorException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.SyntaxErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SyntaxErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:YamlDotNet.SyntaxErrorException.#ctor(YamlDotNet.Mark,YamlDotNet.Mark,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SyntaxErrorException"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.SyntaxErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.SyntaxErrorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:YamlDotNet.TagDirectiveCollection">
            <summary>
            Collection of <see cref="T:YamlDotNet.Tokens.TagDirective"/>.
            </summary>
        </member>
        <member name="M:YamlDotNet.TagDirectiveCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.TagDirectiveCollection"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.TagDirectiveCollection.#ctor(System.Collections.Generic.IEnumerable{YamlDotNet.Tokens.TagDirective})">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.TagDirectiveCollection"/> class.
            </summary>
            <param name="tagDirectives">Initial content of the collection.</param>
        </member>
        <member name="M:YamlDotNet.TagDirectiveCollection.GetKeyForItem(YamlDotNet.Tokens.TagDirective)">
            <summary/>
        </member>
        <member name="M:YamlDotNet.TagDirectiveCollection.Contains(YamlDotNet.Tokens.TagDirective)">
            <summary>
            Gets a value indicating whether the collection contains a directive with the same handle
            </summary>
        </member>
        <member name="T:YamlDotNet.Tokens.AnchorAlias">
            <summary>
            Represents an alias token.
            </summary>
        </member>
        <member name="T:YamlDotNet.Tokens.Token">
            <summary>
            Base class for YAML tokens.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Token.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Token"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="P:YamlDotNet.Tokens.Token.Start">
            <summary>
            Gets the start of the token in the input stream.
            </summary>
        </member>
        <member name="P:YamlDotNet.Tokens.Token.End">
            <summary>
            Gets the end of the token in the input stream.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.AnchorAlias.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.AnchorAlias"/> class.
            </summary>
            <param name="value">The value of the anchor.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.AnchorAlias.#ctor(System.String,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.AnchorAlias"/> class.
            </summary>
            <param name="value">The value of the anchor.</param>
            <param name="start">The start position of the event.</param>
            <param name="end">The end position of the event.</param>
        </member>
        <member name="P:YamlDotNet.Tokens.AnchorAlias.Value">
            <summary>
            Gets the value of the alias.
            </summary>
        </member>
        <member name="T:YamlDotNet.Tokens.Anchor">
            <summary>
            Represents an anchor token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Anchor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Anchor"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.Anchor.#ctor(System.String,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Anchor"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="P:YamlDotNet.Tokens.Anchor.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:YamlDotNet.Tokens.BlockEnd">
            <summary>
            Represents a block end token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockEnd"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.BlockEntry">
            <summary>
            Represents a block entry event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockEntry"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockEntry.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockEntry"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.BlockMappingStart">
            <summary>
            Represents a block mapping start token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockMappingStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockMappingStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockMappingStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockMappingStart"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.BlockSequenceStart">
            <summary>
            Represents a block sequence start token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockSequenceStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockSequenceStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.BlockSequenceStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.BlockSequenceStart"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.DocumentEnd">
            <summary>
            Represents a document end token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.DocumentEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.DocumentEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.DocumentEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.DocumentEnd"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.DocumentStart">
            <summary>
            Represents a document start token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.DocumentStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.DocumentStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.DocumentStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.DocumentStart"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.FlowEntry">
            <summary>
            Represents a flow entry event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowEntry"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowEntry.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowEntry"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.FlowMappingEnd">
            <summary>
            Represents a flow mapping end token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowMappingEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowMappingEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowMappingEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowMappingEnd"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.FlowMappingStart">
            <summary>
            Represents a flow mapping start token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowMappingStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowMappingStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowMappingStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowMappingStart"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.FlowSequenceEnd">
            <summary>
            Represents a flow sequence end token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowSequenceEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowSequenceEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowSequenceEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowSequenceEnd"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.FlowSequenceStart">
            <summary>
            Represents a flow sequence start token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowSequenceStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowSequenceStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.FlowSequenceStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.FlowSequenceStart"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.Key">
            <summary>
            Represents a key token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Key.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Key"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Key.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Key"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.Scalar">
            <summary>
            Represents a scalar token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Scalar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Scalar"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.Scalar.#ctor(System.String,YamlDotNet.ScalarStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Scalar"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.Scalar.#ctor(System.String,YamlDotNet.ScalarStyle,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Scalar"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="style">The style.</param>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="P:YamlDotNet.Tokens.Scalar.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:YamlDotNet.Tokens.Scalar.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:YamlDotNet.ScalarStyle">
            <summary>
            Specifies the style of a YAML scalar.
            </summary>
        </member>
        <member name="F:YamlDotNet.ScalarStyle.Any">
            <summary>
            Let the emitter choose the style.
            </summary>
        </member>
        <member name="F:YamlDotNet.ScalarStyle.Plain">
            <summary>
            The plain scalar style.
            </summary>
        </member>
        <member name="F:YamlDotNet.ScalarStyle.SingleQuoted">
            <summary>
            The single-quoted scalar style.
            </summary>
        </member>
        <member name="F:YamlDotNet.ScalarStyle.DoubleQuoted">
            <summary>
            The double-quoted scalar style.
            </summary>
        </member>
        <member name="F:YamlDotNet.ScalarStyle.Literal">
            <summary>
            The literal scalar style.
            </summary>
        </member>
        <member name="F:YamlDotNet.ScalarStyle.Folded">
            <summary>
            The folded scalar style.
            </summary>
        </member>
        <member name="T:YamlDotNet.Tokens.StreamEnd">
            <summary>
            Represents a stream end event.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.StreamEnd.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.StreamEnd"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.StreamEnd.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.StreamEnd"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.StreamStart">
            <summary>
            Represents a stream start token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.StreamStart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.StreamStart"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.StreamStart.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.StreamStart"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.Tag">
            <summary>
            Represents a tag token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Tag.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Tag"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="suffix">The suffix.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.Tag.#ctor(System.String,System.String,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Tag"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="suffix">The suffix.</param>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="P:YamlDotNet.Tokens.Tag.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:YamlDotNet.Tokens.Tag.Suffix">
            <summary>
            Gets the suffix.
            </summary>
            <value>The suffix.</value>
        </member>
        <member name="T:YamlDotNet.Tokens.TagDirective">
            <summary>
            Represents a tag directive token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.TagDirective.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.TagDirective"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.TagDirective.#ctor(System.String,System.String,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.TagDirective"/> class.
            </summary>
            <param name="handle">The handle.</param>
            <param name="prefix">The prefix.</param>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.TagDirective.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
        </member>
        <member name="M:YamlDotNet.Tokens.TagDirective.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:YamlDotNet.Tokens.TagDirective.ToString">
            <summary/>
        </member>
        <member name="P:YamlDotNet.Tokens.TagDirective.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:YamlDotNet.Tokens.TagDirective.Prefix">
            <summary>
            Gets the prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="T:YamlDotNet.Tokens.Value">
            <summary>
            Represents a value token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Value.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Value"/> class.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.Value.#ctor(YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.Value"/> class.
            </summary>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="T:YamlDotNet.Tokens.VersionDirective">
            <summary>
            Represents a version directive token.
            </summary>
        </member>
        <member name="M:YamlDotNet.Tokens.VersionDirective.#ctor(YamlDotNet.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.VersionDirective"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.VersionDirective.#ctor(YamlDotNet.Version,YamlDotNet.Mark,YamlDotNet.Mark)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Tokens.VersionDirective"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="start">The start position of the token.</param>
            <param name="end">The end position of the token.</param>
        </member>
        <member name="M:YamlDotNet.Tokens.VersionDirective.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
        </member>
        <member name="M:YamlDotNet.Tokens.VersionDirective.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Tokens.VersionDirective.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.GetShortAssemblyQualifiedName(System.Type)">
            <summary>
            Gets the assembly qualified name of the type, but without the assembly version or public token.
            </summary>
            <param name="type">The type.</param>
            <returns>The assembly qualified name of the type, but without the assembly version or public token.</returns>
            <exception cref="T:System.InvalidOperationException">Unable to get an assembly qualified name for type [{0}].DoFormat(type)</exception>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.IsAnonymous(System.Type)">
            <summary>
            Determines whether the specified type is an anonymous type.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is anonymous; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is nullable <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if the specified type is nullable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.IsPureValueType(System.Type)">
            <summary>
            Check if the type is a ValueType and does not contain any non ValueType members.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.IsStruct(System.Type)">
            <summary>
            Returnes true if the specified <paramref name="type"/> is a struct type.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to be analyzed.</param>
            <returns>true if the specified <paramref name="type"/> is a struct type; otehrwise false.</returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Return if an object is a numeric value.
            </summary>
            <param name="type">The type.</param>
            <returns>True if object is a numeric value.</returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.AreEqual(System.Object,System.Object)">
            <summary>
            Compare two objects to see if they are equal or not. Null is acceptable.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.CastToNumericType(System.Type,System.Object)">
            <summary>
            Cast an object to a specified numeric type.
            </summary>
            <param name="obj">Any object</param>
            <param name="type">Numric type</param>
            <returns>Numeric value or null if the object is not a numeric value.</returns>
        </member>
        <member name="M:YamlDotNet.TypeExtensions.CastToDouble(System.Object)">
            <summary>
            Cast boxed numeric value to double
            </summary>
            <param name="obj">boxed numeric value</param>
            <returns>Numeric value in double. Double.Nan if obj is not a numeric value.</returns>
        </member>
        <member name="T:YamlDotNet.Version">
            <summary>
            Specifies the version of the YAML language.
            </summary>
        </member>
        <member name="M:YamlDotNet.Version.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Version"/> class.
            </summary>
            <param name="major">The the major version number.</param>
            <param name="minor">The the minor version number.</param>
        </member>
        <member name="M:YamlDotNet.Version.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare with the current System.Object.</param>
            <returns>
            true if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
        </member>
        <member name="M:YamlDotNet.Version.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:YamlDotNet.Version.Major">
            <summary>
            Gets the major version number.
            </summary>
        </member>
        <member name="P:YamlDotNet.Version.Minor">
            <summary>
            Gets the minor version number.
            </summary>
        </member>
        <member name="T:YamlDotNet.Serialization.YamlStyleAttribute">
            <summary>
            An attribute to modify the output style of a sequence or mapping. 
            This attribute can be apply directly on a type or on a property/field.
            </summary>
        </member>
        <member name="M:YamlDotNet.Serialization.YamlStyleAttribute.#ctor(YamlDotNet.YamlStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:YamlDotNet.Serialization.YamlStyleAttribute"/> class.
            </summary>
            <param name="style">The style.</param>
        </member>
        <member name="P:YamlDotNet.Serialization.YamlStyleAttribute.Style">
            <summary>
            Gets the style.
            </summary>
            <value>The style.</value>
        </member>
    </members>
</doc>
